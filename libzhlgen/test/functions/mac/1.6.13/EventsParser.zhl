"!31c0e8??????00488d3d(???????\?)e8????1a00":
offsetVariable EventsParser* Global_EventsParser_Parser;

".554889e54157415641554154534883ec4848897d98488d3d":
cleanup __amd64 void EventsParser::AddAllEvents(EventsParser *this);
".554889e54157415641554154534881ecf8000100":
cleanup __amd64 void EventsParser::AddEvents(EventsParser *this, EventGenerator& generator, char* file, const std::string& fileName);
".554889e5415741564155415453":
cleanup __amd64 void EventsParser::ProcessBaseNode(EventsParser *this, rapidxml::xml_node<char>* node, EventGenerator& generator);
".554889e54157415641554154534881ec98030000":
cleanup __amd64 std::string EventsParser::ProcessEvent(EventsParser *this, rapidxml::xml_node<char>* node, const std::string& eventName);
".554889e54157415641554154534883ec384989ce4989f749":
cleanup __amd64 std::vector<std::string> EventsParser::ProcessEventList(EventsParser *this, rapidxml::xml_node<char>* node, const std::string& listName);
".554889e541574156":
cleanup __amd64 ShipTemplate EventsParser::ProcessShipEvent(EventsParser *this, rapidxml::xml_node<char>* node);
".554889e54157415641554154534883ec68":
cleanup __amd64 RandomAmount EventsParser::PullMinMax(EventsParser *this, rapidxml::xml_node<char>* node, const std::string& name);
".554889e54157415641554154534881":
cleanup __amd64 ResourcesTemplate EventsParser::ProcessModifyItem(EventsParser *this, ResourcesTemplate& resources, rapidxml::xml_node<char>* node, const std::string& origin);
".554889e54157415641554154534881":
cleanup __amd64 void EventsParser::ProcessChoice(EventsParser *this,EventTemplate *event,rapidxml::xml_node<char> *node,std::string& eventName);


struct EventsParser
{{
	inline static bool ParseBoolean(const std::string& str)
	{
		// Bit manipulation trick: flip the 0x20 bit to check both cases
		// This works because ASCII upper/lower case differs only by bit 0x20
		return ((str[0] | 0x20) == 't' && (str[1] | 0x20) == 'r' && (str[2] | 0x20) == 'u' && (str[3] | 0x20) == 'e');
	}
}};
