"NOT LISTED IN GHIDRA":
cleanup __amd64 Globals::Ellipse Ship::GetBaseEllipse(Ship *this); /* Not listed in Ghidra */
"554889e5488b871805000048":
cleanup __amd64 bool Ship::RoomLocked(Ship *this, int roomId);
"554889e541574156534883ec18f30f1145e44889":
cleanup __amd64 void Ship::OnRenderJump(Ship *this, float progress);
"554889e5415741564155415453504189f64889fb":
cleanup __amd64 void Ship::OnRenderBase(Ship *this, bool unk);
"554889e54157415653504189f64989ff4180bf10":
cleanup __amd64 void Ship::OnRenderFloor(Ship *this, bool unk);
"554889e54156534989fe498b461049394618742dbb0100000031c90f1f440000488b3cc8e83715ff":
cleanup __amd64 void Ship::OnRenderSparks(Ship *this);
"554889e54157415653504989fe498b464049394648744cbb":
cleanup __amd64 void Ship::OnRenderBreaches(Ship *this);
"554889e54157415641554154534883ec284189d74189f448":
cleanup __amd64 void Ship::BreachSpecificHull(Ship *this, int grid_x, int grid_y);
"554889e54157415653504189d64989f74c89fb48c1eb":
cleanup __amd64 int Ship::GetSelectedRoomId(Ship *this, int x, int y, bool unk);
"554889e54157415653504189f64989ff498b4710":
cleanup __amd64 void Ship::SetSelectedRoom(Ship *this, int roomId);
".554889e54863c6488b4f10488b3cc10fb6f2":
cleanup __amd64 void Ship::SetRoomBlackout(Ship *this, int roomId, bool blackout);
".554889e54863c6488b4f10488b3cc10fb6f2":
cleanup __amd64 int Ship::GetAvailableRoomSlot(Ship *this, int roomId, bool intruder);
"554889e54157415653504989fe4c63fe":
cleanup __amd64 int Ship::EmptySlots(Ship *this, int roomId);
"554889e585f67823":
cleanup __amd64 bool Ship::FullRoom(Ship *this, int roomId, bool intruder);
"554889e54157415641554154534883ec2889d341":
cleanup __amd64 int Ship::GetAvailableRoom(Ship *this, int preferred, bool intruder);
"554889e54157415641554154534883ec184189d78975d449":
cleanup __amd64 void Ship::OnRenderWalls(Ship *this, bool forceView, bool doorControlMode);
"554889e54157415641554154534883ec284989f64989ff498d9ff004":
cleanup __amd64 void Ship::OnLoop(Ship *this, std::vector<float>& oxygenLevels);
"554889e54157415641554154534883ec688975cc":
cleanup __amd64 void Ship::BreachRandomHull(Ship *this, int roomId);
"554889e54157415641554154534883ec184989f74989fd49":
cleanup __amd64 std::vector<Repairable*> Ship::GetHullBreaches(Ship *this, bool onlyDamaged);
"554889e54157415641554154534881ec980100000f294580":
cleanup __amd64 void Ship::LockdownRoom(Ship *this, int roomId, Pointf pos);
"554889e54157415641554154534881ec88030100":
cleanup __amd64 void Ship::OnInit(Ship *this, ShipBlueprint* bp);
/* TODO: These are here to make doors work with large rooms.
Once everything else is working, try to crash the game with
ships that have big rooms to see if we need these.
"UNKNOWN FUNCTION DEFENITION":
noop void* Global__NOP__Ship_OnInit_4;
"UNKNOWN FUNCTION DEFENITION":
noop void* Global__NOP__Ship_OnInit_1;
"UNKNOWN FUNCTION DEFENITION":
noop void* Global__NOP__Ship_OnInit_5;
"UNKNOWN FUNCTION DEFENITION":
noop void* Global__NOP__Ship_OnInit_2;
"UNKNOWN FUNCTION DEFENITION":
noop void* Global__NOP__Ship_OnInit_3;
"UNKNOWN FUNCTION DEFENITION":
noop void* Global__NOP__Ship_OnInit_0;
*/


struct Ship depends (ShipGraph, Globals::Ellipse) {{
	Pointf GetRoomCenter(int room)
	{
		auto graph = ShipGraph::GetShipInfo(this->iShipId);
		return graph->GetRoomCenter(room);
	}

	void RenderEngineAnimation(bool showEngines, float alpha);
	
	enum DoorStateType
	{
	  DOOR_CLOSED = 0x0,
	  DOOR_OPEN = 0x1,
	  DOOR_OPEN_FORCED = 0x2,
	  DOOR_HIT = 0x3,
	  DOOR_ANIMATING = 0x4,
	};

}};
