/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'FTLGameStripped'
*/

struct BossShip;
struct CompleteShip;
struct ProjectileFactory;
struct SpaceManager;
struct NebulaCloud;
struct SpaceDrone;
struct Projectile;
struct CrewLaser;
struct WeaponAnimation;
struct Drone;
struct Door;
struct Room;
struct CrewMember;
struct CrewAnimation;
struct LockdownShard;
struct Fire;
struct ShipManager;
struct Store;
struct SystemBox;
struct SystemCustomBox;
struct ArmamentBox;
struct CrewBox;
struct StoreBox;
struct UnlockArrow;
struct CommandGui;
struct EquipmentBox;
struct CrewEquipBox;
struct AugmentEquipBox;
struct UpgradeBox;
struct CombatControl;
struct ControlButton;
struct Pointf;
struct Animation;
struct DamageMessage;
struct WarningMessage;
struct StarMap;
struct Location;
struct CrewBlueprint;
struct WorldManager;
struct OxygenSystem;
struct HackingSystem;
struct BatterySystem;
struct CloakingSystem;
struct MindSystem;
struct Shields;
struct ArtillerySystem;
struct WeaponSystem;
struct DroneSystem;
struct ShipSystem;
struct OuterHull;
struct CloneSystem;
struct TeleportSystem;
struct ChoiceText;
struct Targetable;
struct BoarderDrone;
struct LocationEvent__Choice;
struct DroneBlueprint;
struct SystemBlueprint;
struct AugmentBlueprint;
struct WeaponBlueprint;
struct CrewCustomizeBox;
struct ParticleEmitter;
struct LocationEvent;
struct ShipBlueprint;
struct WindowFrame;
struct ShipButton;
struct WarningWithLines;
struct CAchievement;
struct StatusEffect;
struct GL_Texture;
struct GL_Primitive;
struct std__pair_13float___float;
struct std__vector_4Fire;
struct WeaponMount;
struct std__vector_4bool;
struct Ship__DoorState;
struct std__vector_8GL_Color;
struct std__vector_16AnimationTracker;
struct ResourceControl__DynamicImageInfo;
struct ShipAchievementInfo;
struct StarMap__NebulaInfo;
struct Sector;
struct VTable_AnimationTracker;
struct VTable_CompleteShip;
struct VTable_EquipmentBox;
struct std__pair_26std__string___RandomAmount;
struct std__pair_17std__string___int;
struct WeaponBlueprint__MiniProjectile;
struct EventTemplate__ChoiceTemplate;
struct EventDamage;
struct std__pair_25std__string___std__string;
struct std__vector_21std__vector_8TopScore;
struct std__pair_22CAchievementZ1___Point;
struct VTable_GenericButton;
struct VTable_SystemBox;
struct VTable_CrewMember;
struct VTable_ShipSystem;
struct VTable_Blueprint;
struct VTable_CrewAnimation;
struct VTable_StoreBox;
struct Shields__ShieldAnimation;
struct VTable_CrewTarget;
struct VTable_Drone;
struct VTable_SpaceDrone;
struct VTable_Targetable;
struct VTable_Collideable;
struct VTable_Projectile;
struct VTable_ArmamentControl;
struct VTable_ArmamentBox;

/* 1 */
struct Globals
{
};

/* 533 */
struct std__unordered_map_26std__string___GL_TextureZ1
{
  char unk[28];
};

/* 534 */
struct std__unordered_map_25int___freetype__font_data
{
  char unk[28];
};

/* 535 */
struct std__unordered_map_24GL_TextureZ1___ImageDesc
{
  char unk[28];
};

/* 452 */
struct std__pair_9int___int
{
  int _first;
  int _second;
};

/* 441 */
struct std__string
{
  char *string;
  int length;
  char unk[16];
};

/* 442 */
struct std__vector_11std__string
{
  std__string *_start;
  std__string *_finish;
  std__string *_end;
};

/* 538 */
struct std__vector_33ResourceControl__DynamicImageInfo
{
  ResourceControl__DynamicImageInfo *_start;
  ResourceControl__DynamicImageInfo *_finish;
  ResourceControl__DynamicImageInfo *_end;
};

/* 540 */
struct std__unordered_map_45std__string___ResourceControl__LogicalTexInfo
{
  char unk[28];
};

/* 542 */
struct ResourceManager;

/* 541 */
struct PackageModuleInfo
{
    char* prefix;
    void** init;
    void** cleanup;
    void** list_files_start;
    void** list_files_next;
    void** file_info;
    void** decompress_get_stack_size;
    void** decompress_init;
    void** decompress;
    void* module_data;
    PackageModuleInfo *next;
    size_t prefixlen;
};

/* 438 */
struct GL_FrameBuffer;

/* 2 */
struct ResourceControl
{
  std__unordered_map_26std__string___GL_TextureZ1 images;
  std__unordered_map_25int___freetype__font_data fonts;
  std__unordered_map_24GL_TextureZ1___ImageDesc imageData;
  std__pair_9int___int preLoadProgress;
  std__string nextImageLoaded;
  int imageSwappingMode;
  std__vector_11std__string playerShipImages;
  std__vector_11std__string hangarShipImages;
  std__vector_11std__string enemyShipImages;
  std__vector_33ResourceControl__DynamicImageInfo dynamicImages;
  int dynamicLoadMark;
  std__unordered_map_45std__string___ResourceControl__LogicalTexInfo atlasData;
  ResourceManager *resmgr;
  PackageModuleInfo *package;
  GL_Texture *loading_box;
  GL_Texture *loading_bar;
  int screenWidth;
  int screenHeight;
  int renderPointX;
  int renderPointY;
  GL_FrameBuffer *frameBuffer;
  int fbViewportX;
  int fbViewportY;
  int fbViewportW;
  int fbViewportH;
};

/* 537 */
struct ResourceControl__DynamicImageInfo
{
  std__string name;
  int resid;
};

/* 434 */
struct GL_Texture
{
  int id_;
  int width_;
  int height_;
  bool isLogical_;
  float u_base_;
  float v_base_;
  float u_size_;
  float v_size_;
};

/* 3 */
struct PowerProfile
{
};

/* 178 */
struct ShipObject
{
  void *vptr;
  int iShipId;
};

/* 465 */
struct std__vector_6RoomZ1
{
  Room **_start;
  Room **_finish;
  Room **_end;
};

/* 464 */
struct std__vector_6DoorZ1
{
  Door **_start;
  Door **_finish;
  Door **_end;
};

/* 466 */
struct std__vector_11OuterHullZ1
{
  OuterHull **_start;
  OuterHull **_finish;
  OuterHull **_end;
};

/* 453 */
struct std__vector_11WeaponMount
{
  WeaponMount *_start;
  WeaponMount *_finish;
  WeaponMount *_end;
};

/* 467 */
struct ImageDesc
{
  GL_Texture *tex;
  int resId;
  int w;
  int h;
  int x;
  int y;
  int rot;
};

/* 257 */
struct Point
{
  int x;
  int y;
};

/* 472 */
struct std__vector_15Ship__DoorState
{
  Ship__DoorState *_start;
  Ship__DoorState *_finish;
  Ship__DoorState *_end;
};

/* 265 */
struct AnimationTracker
{
  VTable_AnimationTracker *_vtable;
  float time;
  bool loop;
  float current_time;
  bool running;
  bool reverse;
  bool done;
  float loopDelay;
  float currentDelay;
};

/* 439 */
struct std__vector_9Animation
{
  Animation *_start;
  Animation *_finish;
  Animation *_end;
};

/* 440 */
struct std__vector_10GL_Texture
{
  GL_Texture *_start;
  GL_Texture *_finish;
  GL_Texture *_end;
};

/* 447 */
struct std__vector_5float
{
  float *_start;
  float *_finish;
  float *_end;
};

/* 444 */
struct std__vector_25std_pair_float_float
{
  std__pair_13float___float *_start;
  std__pair_13float___float *_finish;
  void *unk;
};

/* 445 */
struct std__vector_6Pointf
{
  Pointf *_start;
  Pointf *_finish;
  Pointf *_end;
};

/* 446 */
struct std__vector_17WeaponAnimationZ1
{
  WeaponAnimation **_start;
  WeaponAnimation **_finish;
  WeaponAnimation **_end;
};

/* 191 */
struct ExplosionAnimation
{
  AnimationTracker _base;
  ShipObject shipObj;
  std__vector_9Animation explosions;
  std__vector_12GL_TextureZ1 pieces;
  std__vector_11std__string pieceNames;
  std__vector_5float rotationSpeed;
  std__vector_5float rotation;
  std__vector_25std_pair_float_float rotationSpeedMinMax;
  std__vector_6Pointf movementVector;
  std__vector_6Pointf position;
  std__vector_6Pointf startingPosition;
  float explosionTimer;
  float soundTimer;
  bool bFinalBoom;
  bool bJumpOut;
  std__vector_17WeaponAnimationZ1 weaponAnims;
  Point pos;
};

/* 469 */
struct Globals__Ellipse
{
  Point center;
  float a;
  float b;
};

/* 470 */
struct AnimationDescriptor
{
  int numFrames;
  int imageWidth;
  int imageHeight;
  int stripStartY;
  int stripStartX;
  int frameWidth;
  int frameHeight;
};

/* 258 */
struct Pointf
{
  float x;
  float y;
};

/* 862 */
struct std__vector_25std__vector_11std__string
{
  std__vector_11std__string *_start;
  std__vector_11std__string *_finish;
  std__vector_11std__string *_end;
};

/* 266 */
struct Animation
{
  GL_Texture *animationStrip;
  AnimationDescriptor info;
  AnimationTracker tracker;
  Pointf position;
  std__string soundForward;
  std__string soundReverse;
  bool randomizeFrames;
  float fScale;
  float fYStretch;
  int currentFrame;
  bool bAlwaysMirror;
  std__vector_25std__vector_11std__string soundQueue;
  float fadeOut;
  float startFadeOut;
  std__string animName;
  int mask_x_pos;
  int mask_x_size;
  int mask_y_pos;
  int mask_y_size;
  GL_Primitive *primitive;
  GL_Primitive *mirroredPrimitive;
};

/* 473 */
struct std__vector_13LockdownShard
{
  LockdownShard *_start;
  LockdownShard *_finish;
  LockdownShard *_end;
};

/* 6 */
struct Ship
{
  ShipObject _base;
  std__vector_6RoomZ1 vRoomList;
  std__vector_6DoorZ1 vDoorList;
  std__vector_11OuterHullZ1 vOuterWalls;
  std__vector_6DoorZ1 vOuterAirlocks;
  std__pair_9int___int hullIntegrity;
  std__vector_11WeaponMount weaponMounts;
  std__string floorImageName;
  ImageDesc shipFloor;
  GL_Primitive *floorPrimitive;
  std__string shipImageName;
  ImageDesc shipImage;
  Point glowOffset;
  GL_Primitive *shipImagePrimitive;
  std__string cloakImageName;
  ImageDesc shipImageCloak;
  GL_Primitive *cloakPrimitive;
  GL_Primitive *gridPrimitive;
  GL_Primitive *wallsPrimitive;
  GL_Primitive *doorsPrimitive;
  std__vector_15Ship__DoorState doorState;
  bool lastDoorControlMode;
  GL_Texture *thrustersImage;
  GL_Texture *jumpGlare;
  int vertical_shift;
  int horizontal_shift;
  std__string shipName;
  ExplosionAnimation explosion;
  bool bDestroyed;
  Globals__Ellipse baseEllipse;
  Animation engineAnim[2];
  AnimationTracker cloakingTracker;
  bool bCloaked;
  bool bExperiment;
  bool bShowEngines;
  std__vector_13LockdownShard lockdowns;
};

/* 303 */
struct Selectable
{
  void *vptr;
  int selectedState;
};

/* 460 */
struct Globals__Rect
{
  int x;
  int y;
  int w;
  int h;
};

/* 499 */
struct std__vector_3int
{
  int *_start;
  int *_finish;
  int *_end;
};

/* 523 */
struct std__vector_17std__vector_4bool
{
  std__vector_4bool *_start;
  std__vector_4bool *_finish;
  std__vector_4bool *_end;
};

/* 181 */
struct Room
{
  Selectable _base;
  ShipObject _shipObject;
  Globals__Rect rect;
  int iRoomId;
  bool bBlackedOut;
  uint8_t gap_ex_1[2];
  std__vector_3int filledSlots;
  std__vector_17std__vector_4bool slots;
  bool bWarningLight;
  uint8_t gap_ex_2[2];
  AnimationTracker lightTracker;
  int iFireCount;
  std__vector_9Animation fires;
  int primarySlot;
  int primaryDirection;
  float lastO2;
  GL_Primitive *floorPrimitive;
  GL_Primitive *blackoutPrimitive;
  GL_Primitive *highlightPrimitive;
  GL_Primitive *highlightPrimitive2;
  GL_Primitive *o2LowPrimitive;
  GL_Primitive *computerPrimitive;
  GL_Primitive *computerGlowPrimitive;
  GL_Primitive *computerGlowYellowPrimitive;
  GL_Primitive *lightPrimitive;
  GL_Primitive *lightGlowPrimitive;
  Animation stunSparks;
  Animation consoleSparks;
  bool bStunning;
  float fHacked;
  int currentSparkRotation;
  std__vector_9Animation sparks;
  float sparkTimer;
  int sparkCount;
  int iHackLevel;
  Animation roomTapped;
};

/* 301 */
struct CrewTarget
{
  VTable_CrewTarget *_vtable;
  int iShipId;
};

/* 179 */
struct Door
{
  CrewTarget _base;
  Selectable _selectable;
  int iRoom1;
  int iRoom2;
  bool bOpen;
  int iBlast;
  bool bFakeOpen;
  int width;
  int height;
  GL_Primitive *outlinePrimitive;
  GL_Primitive *highlightPrimitive;
  Animation doorAnim;
  Animation doorAnimLarge;
  int iDoorId;
  int baseHealth;
  int health;
  AnimationTracker forcedOpen;
  AnimationTracker gotHit;
  int doorLevel;
  bool bIoned;
  float fakeOpenTimer;
  AnimationTracker lockedDown;
  float lastbase;
  int iHacked;
  int x;
  int y;
  bool bVertical;
};

/* 180 */
struct Repairable
{
  Selectable _base;
  ShipObject shipObj;
  float fDamage;
  Point pLoc;
  float fMaxDamage;
  std__string name;
  int roomId;
  int iRepairCount;
};

/* 294 */
struct OuterHull
{
  Repairable _base;
  Animation breach;
  Animation heal;
};

/* 454 */
struct WeaponMount
{
  Point position;
  bool mirror;
  bool rotate;
  int slide;
  int gib;
};

/* 482 */
struct GL_Color
{
  float r;
  float g;
  float b;
  float a;
};

/* 435 */
struct GL_Primitive
{
  int type;
  float lineWidth;
  bool hasTexture;
  GL_Texture *texture;
  bool textureAntialias;
  bool hasColor;
  GL_Color color;
  int id;
};

/* 695 */
enum DoorStateType
{
};

/* 468 */
struct Ship__DoorState
{
  DoorStateType state;
  bool hacked;
  int level;
};

/* 618 */
struct VTable_AnimationTracker
{
  void (__thiscall *Free)(AnimationTracker *this);
  void (__thiscall *Update)(AnimationTracker *this);
};

/* 443 */
struct std__pair_13float___float
{
  float _first;
  float _second;
};

/* 325 */
struct CachedPrimitive
{
  void *vptr;
  GL_Primitive *primitive;
};

/* 256 */
struct CachedImage
{
  CachedPrimitive _base;
  std__string imageName;
  GL_Texture *texture;
  int x;
  int y;
  float wScale;
  float hScale;
  float x_start;
  float y_start;
  float x_size;
  float y_size;
  float rotation;
  bool mirrored;
};

/* 173 */
struct WeaponAnimation
{
  Animation anim;
  bool bFireShot;
  bool bFiring;
  float fChargeLevel;
  int iChargedFrame;
  int iFireFrame;
  bool bMirrored;
  bool bRotation;
  Point fireLocation;
  bool bPowered;
  Point mountPoint;
  Point renderPoint;
  Point fireMountVector;
  AnimationTracker slideTracker;
  int slideDirection;
  CachedImage iChargeImage;
  Animation explosionAnim;
  WeaponMount mount;
  float fDelayChargeTime;
  Animation boostAnim;
  int boostLevel;
  bool bShowCharge;
  float fActualChargeLevel;
  int iChargeOffset;
  int iChargeLevels;
  int currentOffset;
  CachedImage chargeBox;
  CachedImage chargeBar;
  int iHackLevel;
  Animation hackSparks;
  bool playerShip;
};

/* 189 */
struct LockdownShard
{
  Animation shard;
  Pointf position;
  Pointf goal;
  float speed;
  bool bArrived;
  bool bDone;
  float lifeTime;
  bool superFreeze;
  int lockingRoom;
};

/* 461 */
struct std__vector_4bool
{
  bool *_start;
  bool *_finish;
  bool *_end;
  int unk1;
  int unk2;
};

/* 391 */
struct RandomAmount
{
  int min;
  int max;
  float chanceNone;
};

/* 423 */
struct TextString
{
  std__string data;
  bool isLiteral;
  uint8_t gap_ex[3];
};

/* 519 */
struct std__vector_16std_pair_int_int
{
  std__pair_9int___int *_start;
  std__pair_9int___int *_finish;
  void *unk;
};

/* 332 */
struct ResourcesTemplate
{
  RandomAmount fuel;
  RandomAmount drones;
  RandomAmount missiles;
  RandomAmount scrap;
  RandomAmount items;
  int crew;
  std__string crewType;
  TextString crewName;
  bool cloneable;
  TextString cloneText;
  std__vector_16std_pair_int_int crewSkills;
  std__string weapon;
  std__string drone;
  std__string augment;
  std__string system;
  bool steal;
  int upgradeAmount;
  int upgradeId;
  std__string removeItem;
};

/* 632 */
struct RewardDesc
{
  std__string reward;
  int level;
};

/* 644 */
struct ShipTemplate
{
  std__string shipEventName;
  bool hostile;
};

/* 646 */
struct std__vector_11EventDamage
{
  EventDamage *_start;
  EventDamage *_finish;
  EventDamage *_end;
};

/* 600 */
struct std__vector_12StatusEffect
{
  StatusEffect *_start;
  StatusEffect *_finish;
  StatusEffect *_end;
};

/* 419 */
struct BoardingEvent
{
  std__string type;
  int min;
  int max;
  int amount;
  bool breach;
};

/* 647 */
struct std__vector_29EventTemplate__ChoiceTemplate
{
  EventTemplate__ChoiceTemplate *_start;
  EventTemplate__ChoiceTemplate *_finish;
  EventTemplate__ChoiceTemplate *_end;
};

/* 650 */
struct std__vector_30std_pair_std_string_std_string
{
  std__pair_25std__string___std__string *_start;
  std__pair_25std__string___std__string *_finish;
  std__pair_25std__string___std__string *_end;
};

/* 7 */
struct EventTemplate
{
  ResourcesTemplate resources;
  RewardDesc reward;
  TextString text;
  bool loadText;
  bool unique;
  ShipTemplate shipTemplate;
  std__string eventName;
  std__vector_11EventDamage damage;
  int environmentFlag;
  int environmentTarget;
  bool store;
  bool repair;
  bool reveal_map;
  std__vector_12StatusEffect statusEffects;
  bool distressBeacon;
  BoardingEvent boarders;
  int modifyPursuit;
  std__vector_29EventTemplate__ChoiceTemplate choices;
  std__vector_30std_pair_std_string_std_string nameDefinitions;
  std__string imageBackground;
  std__string imagePlanet;
  std__string quest;
  TextString unlockShipText;
  int unlockShip;
  int fleet;
  bool secretSector;
};

/* 645 */
struct EventDamage
{
  int system;
  int amount;
  int effect;
};

/* 420 */
struct StatusEffect
{
  int type;
  int system;
  int amount;
  int target;
};

/* 601 */
struct ChoiceReq
{
  std__string object;
  int min_level;
  int max_level;
  int max_group;
  bool blue;
};

/* 643 */
struct EventTemplate__ChoiceTemplate
{
  TextString text;
  bool loadText;
  std__string eventName;
  bool hiddenReward;
  ChoiceReq requirement;
};

/* 649 */
struct std__pair_25std__string___std__string
{
  std__string _first;
  std__string _second;
};

/* 252 */
struct CEvent
{
  void *vptr;
};

/* 250 */
struct GenericButton
{
  VTable_GenericButton *_vtable;
  Point position;
  Globals__Rect hitbox;
  bool allowAnyTouch;
  bool touchSelectable;
  bool bRenderOff;
  bool bRenderSelected;
  bool bFlashing;
  AnimationTracker flashing;
  bool bActive;
  bool bHover;
  bool bActivated;
  bool bSelected;
  int activeTouch;
};

/* 388 */
struct Button
{
  GenericButton _base;
  GL_Texture *images[3];
  GL_Primitive *primitives[3];
  Point imageSize;
  bool bMirror;
};

/* 573 */
struct std__vector_8ButtonZ1
{
  Button **_start;
  Button **_finish;
  Button **_end;
};

/* 251 */
struct TextButton
{
  GenericButton _base;
  GL_Primitive *primitives[3];
  GL_Texture *baseImage;
  Point baseImageOffset;
  GL_Primitive *basePrimitive;
  bool colorsSet;
  GL_Color colors[3];
  GL_Color textColor;
  Point buttonSize;
  int cornerInset;
  bool autoWidth;
  int autoWidthMargin;
  int autoWidthMin;
  bool autoRightAlign;
  TextString label;
  int font;
  int lineHeight;
  int textYOffset;
  bool autoShrink;
};

/* 561 */
struct std__vector_15GenericButtonZ1
{
  GenericButton **_start;
  GenericButton **_finish;
  GenericButton **_end;
};

/* 562 */
struct std__vector_18CrewCustomizeBoxZ1
{
  CrewCustomizeBox **_start;
  CrewCustomizeBox **_finish;
  CrewCustomizeBox **_end;
};

/* 563 */
struct std__vector_14EquipmentBoxZ1
{
  EquipmentBox **_start;
  EquipmentBox **_finish;
  EquipmentBox **_end;
};

/* 314 */
struct Description
{
  TextString title;
  TextString shortTitle;
  TextString description;
  int cost;
  int rarity;
  int baseRarity;
  int bp;
  bool locked;
  TextString tooltip;
  std__string tip;
};

/* 387 */
struct InfoBox
{
  Point location;
  const SystemBlueprint *blueprint;
  Description desc;
  int tempUpgrade;
  int powerLevel;
  int maxPower;
  int systemId;
  int systemWidth;
  int yShift;
  Point descBoxSize;
  const CrewBlueprint *pCrewBlueprint;
  std__string warning;
  bool bDetailed;
  std__string additionalTip;
  std__string additionalWarning;
  WindowFrame *primaryBox;
  int primaryBoxOffset;
  WindowFrame *secondaryBox;
  std__string droneBlueprint;
};

/* 564 */
struct std__vector_17SystemCustomBoxZ1
{
  SystemCustomBox **_start;
  SystemCustomBox **_finish;
  SystemCustomBox **_end;
};

/* 548 */
struct std__vector_14GL_PrimitiveZ1
{
  GL_Primitive **_start;
  GL_Primitive **_finish;
  GL_Primitive **_end;
};

/* 568 */
struct std__vector_12ShipButtonZ1
{
  ShipButton **_start;
  ShipButton **_finish;
  ShipButton **_end;
};

/* 567 */
struct std__vector_11UnlockArrow
{
  UnlockArrow *_start;
  UnlockArrow *_finish;
  UnlockArrow *_end;
};

/* 241 */
struct FocusWindow
{
  void *vptr;
  bool bOpen;
  bool bFullFocus;
  uint8_t gap_ex_fw[2];
  Point close;
  bool bCloseButtonSelected;
  Point position;
};

/* 565 */
struct std__vector_10ChoiceText
{
  ChoiceText *_start;
  ChoiceText *_finish;
  ChoiceText *_end;
};

/* 566 */
struct std__vector_13Globals__Rect
{
  Globals__Rect *_start;
  Globals__Rect *_finish;
  Globals__Rect *_end;
};

/* 339 */
struct Blueprint
{
  VTable_Blueprint *_vtable;
  std__string name;
  Description desc;
  int type;
};

/* 518 */
struct std__vector_10TextString
{
  TextString *_start;
  TextString *_finish;
  TextString *_end;
};

/* 521 */
struct std__vector_21std__vector_8GL_Color
{
  std__vector_8GL_Color *_start;
  std__vector_8GL_Color *_finish;
  std__vector_8GL_Color *_end;
};

/* 279 */
struct CrewBlueprint
{
  Blueprint _base;
  TextString crewName;
  TextString crewNameLong;
  std__vector_10TextString powers;
  bool male;
  std__vector_16std_pair_int_int skillLevel;
  std__vector_21std__vector_8GL_Color colorLayers;
  std__vector_3int colorChoices;
};

/* 280 */
struct ResourceEvent
{
  int missiles;
  int fuel;
  int drones;
  int scrap;
  int crew;
  bool traitor;
  bool cloneable;
  TextString cloneText;
  std__string crewType;
  const WeaponBlueprint *weapon;
  const DroneBlueprint *drone;
  const AugmentBlueprint *augment;
  CrewBlueprint crewBlue;
  int systemId;
  int weaponCount;
  int droneCount;
  bool steal;
  bool intruders;
  int fleetDelay;
  int hullDamage;
  int upgradeAmount;
  int upgradeId;
  int upgradeSuccessFlag;
  std__string removeItem;
};

/* 211 */
struct ChoiceBox
{
  FocusWindow _base;
  GL_Texture *textBox;
  WindowFrame *box;
  std__string mainText;
  std__vector_10ChoiceText choices;
  unsigned int columnSize;
  std__vector_13Globals__Rect choiceBoxes;
  int potentialChoice;
  int selectedChoice;
  int fontSize;
  bool centered;
  int gap_size;
  float openTime;
  ResourceEvent rewards;
  GL_Color currentTextColor;
  Pointf lastChoice;
};

/* 223 */
struct ShipSelect
{
  Point position;
  Point titlePos;
  std__vector_14GL_PrimitiveZ1 shipListBase;
  std__vector_12ShipButtonZ1 shipButtons;
  std__vector_11UnlockArrow arrows;
  bool bOpen;
  int selectedShip;
  InfoBox infoBox;
  int currentType;
  TextButton typeA;
  TextButton typeB;
  TextButton typeC;
  TextButton confirm;
  bool bConfirmed;
  int activeTouch;
  ChoiceBox tutorial;
  int tutorialPage;
};

/* 270 */
struct TimerHelper
{
  int maxTime;
  int minTime;
  float currTime;
  float currGoal;
  bool loop;
  bool running;
};

/* 212 */
struct TextInput
{
  std__string prompt;
  std__vector_3int text;
  std__vector_3int oldText;
  int pos;
  int lastPos;
  bool bActive;
  int allowedChars;
  int maxChars;
  TimerHelper blinker;
};

/* 569 */
struct std__vector_19ShipAchievementInfo
{
  ShipAchievementInfo *_start;
  ShipAchievementInfo *_finish;
  ShipAchievementInfo *_end;
};

/* 210 */
struct ShipBuilder
{
  ShipManager *currentShip;
  GL_Primitive *nameBoxPrimitive;
  GL_Primitive *enableAdvancedPrimitive;
  Button resetButton;
  Button clearButton;
  TextButton startButton;
  TextButton backButton;
  TextButton renameButton;
  Button leftButton;
  Button rightButton;
  TextButton listButton;
  TextButton showButton;
  TextButton easyButton;
  TextButton normalButton;
  TextButton hardButton;
  TextButton typeA;
  TextButton typeB;
  TextButton typeC;
  Point typeALoc;
  Point typeBLoc;
  Point typeCLoc;
  TextButton randomButton;
  TextButton advancedOffButton;
  TextButton advancedOnButton;
  std__vector_15GenericButtonZ1 buttons;
  std__vector_9Animation animations;
  std__vector_18CrewCustomizeBoxZ1 vCrewBoxes;
  bool bOpen;
  GL_Primitive *baseImage;
  GL_Primitive *shipSelectBox;
  GL_Primitive *shipAchBox;
  GL_Primitive *shipEquipBox;
  GL_Primitive *startButtonBox;
  GL_Primitive *advancedButtonBox;
  int typeAOffset;
  int typeBOffset;
  int typeCOffset;
  int shipAchPadding;
  int advancedTitleOffset;
  std__vector_14EquipmentBoxZ1 vEquipmentBoxes;
  InfoBox infoBox;
  std__vector_17SystemCustomBoxZ1 sysBoxes;
  int shoppingId;
  int currentSlot;
  int currentBox;
  bool bDone;
  const ShipBlueprint *ships[30];
  int currentShipId;
  int storeIds[4];
  bool bRenaming;
  std__string currentName;
  bool bShowRooms;
  bool bCustomizingCrew;
  Animation walkingMan;
  Pointf walkingManPos;
  ShipSelect shipSelect;
  ChoiceBox introScreen;
  bool bShowedIntro;
  int currentType;
  TextInput nameInput;
  int activeTouch;
  bool activeTouchIsShip;
  bool shipDragActive;
  bool shipDragVertical;
  Point shipDragOffset;
  std__vector_19ShipAchievementInfo shipAchievements;
  int selectedAch;
  GL_Texture *arrow;
  WindowFrame *descBox;
  AnimationTracker tracker;
  bool encourageShipList;
};

/* 247 */
struct SlideBar
{
  Globals__Rect box;
  bool hovering;
  bool holding;
  Globals__Rect marker;
  Point mouseStart;
  Point rectStart;
  std__pair_9int___int minMax;
};

/* 571 */
struct std__vector_13ControlButton
{
  ControlButton *_start;
  ControlButton *_finish;
  ControlButton *_end;
};

/* 386 */
struct ConfirmWindow
{
  FocusWindow _base;
  TextString text;
  int textHeight;
  int minWidth;
  int windowWidth;
  TextString yesText;
  TextString noText;
  bool autoCenter;
  GL_Texture *windowImage;
  GL_Primitive *window;
  TextButton yesButton;
  TextButton noButton;
  bool result;
};

/* 249 */
struct ControlsScreen
{
  std__vector_13ControlButton buttons[4];
  int selectedButton;
  TextButton defaultButton;
  ConfirmWindow resetDialog;
  Button pageButtons[4];
  int currentPage;
  WindowFrame *customBox;
};

/* 572 */
struct std__vector_12TextButtonZ1
{
  TextButton **_start;
  TextButton **_finish;
  TextButton **_end;
};

/* 532 */
struct LanguageChooser
{
  FocusWindow _base;
  std__vector_12TextButtonZ1 buttons;
  int iChoice;
};

/* 246 */
struct OptionsScreen
{
  ChoiceBox _base;
  Point position;
  Point wipeProfilePosition;
  SlideBar soundVolume;
  SlideBar musicVolume;
  bool bCustomizeControls;
  ControlsScreen controls;
  TextButton closeButton;
  TextButton wipeProfileButton;
  int choiceFullscreen;
  int choiceVSync;
  int choiceFrameLimit;
  int choiceLowend;
  int choiceColorblind;
  int choiceLanguage;
  int choiceDialogKeys;
  int choiceShowPaths;
  int choiceAchievementPopups;
  int choiceAutoPause;
  int choiceTouchAutoPause;
  int choiceControls;
  int lastFullScreen;
  bool isSoundTouch;
  bool isMusicTouch;
  LanguageChooser langChooser;
  bool showWipeButton;
  ConfirmWindow wipeProfileDialog;
  ChoiceBox restartRequiredDialog;
};

/* 243 */
struct CreditScreen
{
  float scroll;
  std__string shipName;
  std__string crewString;
  float pausing;
  GL_Texture *bg;
  std__vector_11std__string creditNames;
  int lastValidCredit;
  int touchesDown;
  double touchDownTime;
  float skipMessageTimer;
  char gap5C[3];
  char _unk;
};

/* 474 */
struct std__vector_12CrewMemberZ1
{
  CrewMember **_start;
  CrewMember **_finish;
  CrewMember **_end;
};

/* 531 */
struct MainMenu
{
  bool bOpen;
  int activeTouch;
  GL_Texture *background;
  GL_Texture *glowy;
  AnimationTracker glowTracker;
  Button continueButton;
  Button startButton;
  Button helpButton;
  Button statButton;
  Button optionsButton;
  Button creditsButton;
  Button quitButton;
  bool itbButtonActive;
  Button itbButton;
  Animation *itbAnim;
  std__vector_8ButtonZ1 buttons;
  int finalChoice;
  ShipBuilder shipBuilder;
  bool bScoreScreen;
  OptionsScreen optionScreen;
  bool bSelectSave;
  ConfirmWindow confirmNewGame;
  ChoiceBox changelog;
  bool bCreditScreen;
  char _unk[4];
  CreditScreen credits;
  bool bChangedLogin;
  std__vector_12CrewMemberZ1 testCrew;
  bool bChangedScreen;
  std__string error;
  char gap34A4[3];
  char _unk2;
};

/* 150 */
struct CApp
{
  CEvent _base;
  bool Running;
  bool shift_held;
  CommandGui *gui;
  WorldManager *world;
  MainMenu menu;
  LanguageChooser langChooser;
  int screen_x;
  int screen_y;
  int modifier_x;
  int modifier_y;
  bool fullScreenLastState;
  bool minimized;
  bool minLastState;
  bool focus;
  bool focusLastState;
  bool steamOverlay;
  bool steamOverlayLastState;
  bool rendering;
  bool gameLogic;
  float mouseModifier_x;
  float mouseModifier_y;
  GL_FrameBuffer *framebuffer;
  bool fboSupport;
  int x_bar;
  int y_bar;
  bool lCtrl;
  bool useFrameBuffer;
  bool manualResolutionError;
  int manualResErrorX;
  int manualResErrorY;
  bool nativeFullScreenError;
  bool fbStretchError;
  char __NULL[2];
  char lastLanguage[24];
  char inputFocus;
  char useDirect3D;
};

/* 475 */
struct std__vector_15DamageMessageZ1
{
  DamageMessage **_start;
  DamageMessage **_finish;
  DamageMessage **_end;
};

/* 235 */
struct ShipStatus
{
  Point location;
  float size;
  ShipManager *ship;
  CombatControl *combat;
  GL_Primitive *hullBox;
  GL_Primitive *hullBox_Red;
  GL_Primitive *shieldBox_On;
  GL_Primitive *shieldBox_Off;
  GL_Primitive *shieldBox_Red;
  GL_Primitive *shieldCircleCharged[4];
  GL_Primitive *shieldCircleUncharged[4];
  GL_Primitive *shieldCircleHacked[4];
  GL_Primitive *shieldCircleHackedCharged[4];
  GL_Primitive *energyShieldBox;
  GL_Primitive *energyShieldBar[5];
  GL_Texture *hullLabel;
  GL_Texture *hullLabel_Red;
  GL_Primitive *shieldBoxPurple;
  GL_Primitive *oxygenPurple;
  GL_Primitive *evadePurple;
  GL_Primitive *evadeOxygenBox;
  GL_Primitive *evadeOxygenBox_topRed;
  GL_Primitive *evadeOxygenBox_bottomRed;
  GL_Primitive *evadeOxygenBox_bothRed;
  GL_Primitive *fuelIcon;
  GL_Primitive *missilesIcon;
  GL_Primitive *dronesIcon;
  GL_Primitive *scrapIcon;
  GL_Primitive *fuelIcon_red;
  GL_Primitive *missilesIcon_red;
  GL_Primitive *dronesIcon_red;
  GL_Primitive *scrapIcon_red;
  GL_Primitive *healthMask;
  GL_Texture *healthMaskTexture;
  int lastHealth;
  Globals__Ellipse baseShield;
  int currentHover;
  Point evadeOxygenBoxLocation;
  int lastFuel;
  int lastDrones;
  int lastScrap;
  int lastMissiles;
  int lastHull;
  WarningWithLines *hullMessage;
  WarningMessage *shieldMessage;
  WarningMessage *oxygenMessage;
  WarningMessage *boardingMessage;
  std__vector_15DamageMessageZ1 resourceMessages;
  AnimationTracker noMoneyTracker;
  AnimationTracker flashTracker;
  bool bBossFight;
  bool bEnemyShip;
  Point noShipShift;
  Point intruderShift;
  Point energyShieldPos;
  Point intruderPos;
};

/* 605 */
struct std__vector_9CrewBoxZ1
{
  CrewBox **_start;
  CrewBox **_finish;
  CrewBox **_end;
};

/* 213 */
struct CrewControl
{
  ShipManager *shipManager;
  std__vector_12CrewMemberZ1 selectedCrew;
  std__vector_12CrewMemberZ1 potentialSelectedCrew;
  Door *selectedDoor;
  Repairable *selectedRepair;
  Point selectedGrid;
  int selectedRoom;
  bool selectedPlayerShip;
  Point availablePosition;
  std__vector_9CrewBoxZ1 crewBoxes;
  Point firstMouse;
  Point currentMouse;
  Point worldFirstMouse;
  Point worldCurrentMouse;
  bool mouseDown;
  bool bUpdated;
  int activeTouch;
  char selectingCrew;
  char selectingCrewOnPlayerShip;
  int _unk;
  double selectingCrewStartTime;
  bool doorControlMode;
  bool doorControlOpen;
  bool doorControlOpenSet;
  CombatControl *combatControl;
  unsigned int selectedCrewBox;
  AnimationTracker crewMessage;
  std__string message;
  Button saveStations;
  Button returnStations;
  GL_Primitive *saveStationsBase;
  GL_Primitive *returnStationsBase;
  int stationsLastY;
  int _unk2;
};

/* 549 */
struct std__vector_11SystemBoxZ1
{
  SystemBox **_start;
  SystemBox **_finish;
  SystemBox **_end;
};

/* 199 */
struct SystemControl
{
  ShipManager *shipManager;
  CombatControl *combatControl;
  std__vector_11SystemBoxZ1 sysBoxes;
  Globals__Rect SystemPower;
  bool bSystemPowerHover;
  Point position;
  Point systemPowerPosition;
  Point subSystemPosition;
  GL_Primitive *wiresImage;
  GL_Primitive *wiresMask;
  GL_Primitive *noButton;
  GL_Primitive *button;
  GL_Primitive *noButton_cap;
  GL_Primitive *button_cap;
  GL_Primitive *drone;
  GL_Primitive *drone3;
  GL_Primitive *drone2;
  GL_Primitive *sub_box;
  int sub_spacing;
  WarningMessage *notEnoughPower;
  AnimationTracker flashBatteryPower;
  AnimationTracker flashTracker;
};

/* 547 */
struct std__vector_13ArmamentBoxZ1
{
  ArmamentBox **_start;
  ArmamentBox **_finish;
  ArmamentBox **_end;
};

/* 242 */
struct VTable_ArmamentControl
{
  void (__thiscall *Free)(ArmamentControl *this);
  void (__thiscall *OnLanguageChange)(ArmamentControl *this);
  void (__thiscall *OnLoop)(ArmamentControl *this);
  void (__thiscall *OnRender)(ArmamentControl *this, bool front);
  void (__thiscall *RenderTouchTooltips)(ArmamentControl *this);
  void (__thiscall *RenderLabels)(ArmamentControl *this);
  void (__thiscall *RenderWarnings)(ArmamentControl *this);
  void (__thiscall *RenderDragging)(ArmamentControl *this);
  bool (__thiscall *IsDragging)(ArmamentControl *this);
  void (__thiscall *Restart)(ArmamentControl *this);
  void (__thiscall *OnCleanup)(ArmamentControl *this);
  void (__thiscall *Close)(ArmamentControl *this);
  void (__thiscall *SetOpen)(ArmamentControl *this, bool open);
  bool (__thiscall *LButton)(ArmamentControl *this, int mX, int mY, bool shift);
  bool (__thiscall *LButtonUp)(ArmamentControl *this, int mX, int mY, bool shift);
  void (__thiscall *RButton)(ArmamentControl *this, int mX, int mY, bool shift);
  void (__thiscall *MouseMove)(ArmamentControl *this, int mX, int mY);
  bool (__thiscall *OnTouch)(ArmamentControl *this, TouchAction action, int id, int x, int y, int initialX, int initialY);
  bool (__thiscall *KeyDown)(ArmamentControl *this, SDLKey sym);
  void (__thiscall *LinkShip)(ArmamentControl *this, ShipManager *ship);
  ArmamentBox* (__thiscall *CreateArmamentBox)(ArmamentControl *this, Point loc);
  int (__thiscall *NumArmamentSlots)(ArmamentControl *this);
  Point (__thiscall *ArmamentBoxOrigin)(ArmamentControl *this);
  TextString (__thiscall *HolderLabel)(ArmamentControl *this);
  SDLKey (__thiscall *ArmamentHotkey)(ArmamentControl *this, unsigned int i);
  void (__thiscall *SelectArmament)(ArmamentControl *this, unsigned int i);
  void (__thiscall *DeselectArmament)(ArmamentControl *this, unsigned int i);
  void (__thiscall *SwapArmaments)(ArmamentControl *this, unsigned int a, unsigned int b);
};

struct ArmamentControl
{
  VTable_ArmamentControl *_vtable;
  int systemId;
  CommandGui *gui;
  ShipManager *shipManager;
  std__vector_13ArmamentBoxZ1 boxes;
  Point location;
  Globals__Rect touchHitBox;
  GL_Texture *holderImage;
  GL_Primitive *holder;
  GL_Primitive *holderTab;
  std__vector_14GL_PrimitiveZ1 smallBoxHolder;
  std__vector_9Animation smallBoxHackAnim;
  int smallBoxHolderTop;
  bool bOpen;
  Point lastMouse;
  Point currentMouse;
  int draggingBox;
  int draggingTouch;
  bool bDragging;
  int iLastSwapSlot;
  bool bTutorialFlash;
  int iFlashSlot;
  int activeTouch;
};

/* 272 */
struct WarningMessage
{
  void *vptr;
  AnimationTracker tracker;
  Point position;
  bool isImage;
  TextString text;
  bool centerText;
  GL_Color textColor;
  bool useWarningLine;
  CachedImage image;
  std__string imageName;
  bool flash;
  std__string sound;
  AnimationTracker flashTracker;
};

/* 239 */
struct WeaponControl
{
  ArmamentControl _base;
  Targetable *currentTarget;
  ProjectileFactory *armedWeapon;
  bool autoFiring;
  TextButton autoFireButton;
  GL_Primitive *autoFireBase;
  GL_Primitive *targetIcon[4];
  GL_Primitive *targetIconYellow[4];
  Pointf autoFireFocus;
  WarningMessage missileMessage;
  WarningMessage systemMessage;
  int armedSlot;
};

/* 234 */
struct DroneControl
{
  ArmamentControl _base;
  WarningMessage droneMessage;
  WarningMessage noTargetMessage;
  WarningMessage systemMessage;
};

/* 550 */
struct std__vector_14CompleteShipZ1
{
  CompleteShip **_start;
  CompleteShip **_finish;
  CompleteShip **_end;
};

/* 155 */
struct HandAnimation
{
  GL_Texture *hand;
  Point start;
  Point finish;
  Pointf location;
  bool bRunning;
  float pause;
};

/* 244 */
struct CombatControl
{
  CommandGui *gui;
  ShipManager *shipManager;
  Point playerShipPosition;
  SpaceManager *space;
  WeaponControl weapControl;
  DroneControl droneControl;
  std__vector_11SystemBoxZ1 sysBoxes;
  std__vector_14CompleteShipZ1 enemyShips;
  CompleteShip *currentTarget;
  SpaceDrone *currentDrone;
  Point position;
  int selectedRoom;
  int selectedSelfRoom;
  Point targetPosition;
  Point boxPosition;
  WindowFrame *hostileBoxFrame;
  CachedImage healthMask;
  CachedImage shieldCircleCharged[5];
  CachedImage shieldCircleUncharged[5];
  CachedImage shieldCircleHacked[5];
  CachedImage shieldCircleHackedCharged[5];
  CachedImage shieldChargeBox;
  CachedImage superShieldBox5;
  CachedImage superShieldBox12;
  bool open;
  float shipIconSize;
  Pointf potentialAiming;
  std__vector_6Pointf aimingPoints;
  Pointf lastMouse;
  bool mouseDown;
  bool isAimingTouch;
  bool movingBeam;
  Point beamMoveLast;
  bool invalidBeamTouch;
  Point screenReposition;
  std__pair_9int___int teleportCommand;
  int iTeleportArmed;
  CachedImage teleportTarget_send;
  CachedImage teleportTarget_return;
  CachedImage hackTarget;
  CachedImage mindTarget;
  AnimationTracker ftl_timer;
  WarningMessage ftlWarning;
  AnimationTracker hacking_timer;
  std__vector_11std__string hackingMessages;
  bool boss_visual;
  bool bTeachingBeam;
  WindowFrame *tipBox;
  HandAnimation hand;
};

/* 606 */
struct TextButton0
{
  GenericButton _base;
  GL_Primitive *primitives[3];
  GL_Texture *baseImage;
  Point baseImageOffset;
  GL_Primitive *basePrimitive;
  bool colorsSet;
  _BYTE gap65[3];
  GL_Color colors[3];
  GL_Color textColor;
  Point buttonSize;
  int cornerInset;
  bool autoWidth;
  _BYTE gapB5[3];
  int autoWidthMargin;
  int autoWidthMin;
  bool autoRightAlign;
  _BYTE gapC1[3];
  TextString label;
  int font;
  int lineHeight;
  int textYOffset;
};

/* 236 */
struct FTLButton
{
  TextButton0 _base;
  bool autoShrinkText;
  bool ready;
  float ftl_blink;
  float ftl_blink_dx;
  float pullout;
  ShipManager *ship;
  GL_Primitive *baseImage;
  GL_Primitive *baseImageRed;
  GL_Primitive *pulloutBase;
  GL_Primitive *pulloutBaseRed;
  GL_Primitive *pilotOn;
  GL_Primitive *pilotOff1;
  GL_Primitive *pilotOff2;
  GL_Primitive *enginesOn;
  GL_Primitive *enginesOff1;
  GL_Primitive *enginesOff2;
  GL_Texture *FTL_loadingbars;
  GL_Texture *FTL_loadingbars_off;
  GL_Primitive *loadingBars;
  GL_Primitive *loadingBarsOff;
  int lastBarsWidth;
  WarningMessage *enginesDown;
  bool bOutOfFuel;
  bool bBossFight;
  bool bHoverRaw;
  bool bHoverPilot;
  bool bHoverEngine;
};

/* 383 */
struct SpaceStatus
{
  GL_Primitive *warningImages[10];
  WarningMessage *warningMessage;
  WarningMessage *incomingFire;
  Globals__Rect hitbox;
  Globals__Rect hitbox2;
  int currentEffect;
  int currentEffect2;
  SpaceManager *space;
  Point position;
  int touchedTooltip;
};

/* 607 */
struct std__vector_13FocusWindowZ1
{
  FocusWindow **_start;
  FocusWindow **_finish;
  FocusWindow **_end;
};

/* 216 */
struct MenuScreen
{
  FocusWindow _base;
  GL_Texture *mainImage;
  GL_Primitive *menuPrimitive;
  int menuWidth;
  std__vector_12TextButtonZ1 buttons;
  int command;
  std__vector_3int commands;
  Point position;
  ConfirmWindow confirmDialog;
  int tempCommand;
  GenericButton *saveQuit;
  bool bShowControls;
  Point statusPosition;
  GL_Texture *difficultyBox;
  int difficultyWidth;
  std__string difficultyLabel;
  std__string difficultyText;
  GL_Texture *dlcBox;
  int dlcWidth;
  std__string dlcLabel;
  std__string dlcText;
  GL_Texture *achBox;
  GL_Primitive *achBoxPrimitive;
  int achWidth;
  std__string achLabel;
  std__vector_19ShipAchievementInfo shipAchievements;
  int selectedAch;
  InfoBox info;
};

/* 201 */
struct GameOver
{
  FocusWindow _base;
  std__vector_12TextButtonZ1 buttons;
  GL_Primitive *box;
  int boxWidth;
  int command;
  std__vector_3int commands;
  bool bShowStats;
  Point position;
  std__string gameoverText;
  bool bVictory;
  float openedTimer;
  CreditScreen credits;
  bool bShowingCredits;
};

/* 233 */
struct InputBox
{
  FocusWindow _base;
  WindowFrame *textBox;
  std__string mainText;
  bool bDone;
  bool bInvertCaps;
  std__string inputText;
  std__vector_11std__string lastInputs;
  int lastInputIndex;
};

/* 218 */
struct TabbedWindow
{
  FocusWindow _base;
  std__vector_8ButtonZ1 buttons;
  std__vector_13FocusWindowZ1 windows;
  std__vector_11std__string names;
  unsigned int currentTab;
  int buttonType;
  TextButton doneButton;
  Point move;
  bool bBlockClose;
  bool bTutorialMode;
  bool bWindowLock;
};

/* 609 */
struct std__vector_12UpgradeBoxZ1
{
  UpgradeBox **_start;
  UpgradeBox **_finish;
  UpgradeBox **_end;
};

/* 411 */
struct ReactorButton
{
  Button _base;
  int tempUpgrade;
  ShipManager *ship;
  bool selected;
};

/* 231 */
struct Upgrades
{
  FocusWindow _base;
  GL_Texture *box;
  std__vector_12UpgradeBoxZ1 vUpgradeBoxes;
  ShipManager *shipManager;
  TextButton undoButton;
  ReactorButton reactorButton;
  InfoBox infoBox;
  Point infoBoxLoc;
  int systemCount;
  int forceSystemInfoWidth;
};

/* 208 */
struct DropBox
{
  Point position;
  bool isSellBox;
  GL_Texture *boxImage[2];
  int selectedImage;
  TextString titleText;
  TextString bodyText;
  int bodySpace;
  TextString lowerText;
  TextString sellText;
  std__string sellCostText;
  int textWidth;
  int insertHeight;
  int titleInsert;
};

/* 610 */
struct std__vector_14CrewEquipBoxZ1
{
  CrewEquipBox **_start;
  CrewEquipBox **_finish;
  CrewEquipBox **_end;
};

/* 209 */
struct CrewManifest
{
  FocusWindow _base;
  GL_Primitive *box;
  DropBox overBox;
  ShipManager *shipManager;
  std__vector_14CrewEquipBoxZ1 crewBoxes;
  InfoBox infoBox;
  int confirmingDelete;
  ConfirmWindow deleteDialog;
};

/* 556 */
struct std__vector_19ProjectileFactoryZ1
{
  ProjectileFactory **_start;
  ProjectileFactory **_finish;
  ProjectileFactory **_end;
};

/* 225 */
struct Equipment
{
  FocusWindow _base;
  GL_Texture *box;
  GL_Texture *storeBox;
  DropBox overBox;
  DropBox overAugImage;
  DropBox sellBox;
  bool bSellingItem;
  ShipManager *shipManager;
  std__vector_14EquipmentBoxZ1 vEquipmentBoxes;
  std__vector_19ProjectileFactoryZ1 weaponsTrashList;
  EquipmentBox *overcapacityBox;
  AugmentEquipBox *overAugBox;
  int selectedEquipBox;
  int draggingEquipBox;
  int potentialDraggingBox;
  bool bDragging;
  Point firstMouse;
  Point currentMouse;
  Point dragBoxCenter;
  Point dragBoxOffset;
  InfoBox infoBox;
  std__string sellCostText;
  bool bOverCapacity;
  bool bOverAugCapacity;
  bool bStoreMode;
  int cargoId;
  Point infoBoxLoc;
};

/* 594 */
struct std__vector_7StoreZ1
{
  Store **_start;
  Store **_finish;
  Store **_end;
};

/* 224 */
struct CommandGui
{
  ShipStatus shipStatus;
  CrewControl crewControl;
  SystemControl sysControl;
  CombatControl combatControl;
  FTLButton ftlButton;
  SpaceStatus spaceStatus;
  StarMap *starMap;
  CompleteShip *shipComplete;
  std__vector_13FocusWindowZ1 focusWindows;
  Point pauseTextLoc;
  GL_Primitive *pauseImage;
  GL_Primitive *pauseImage2;
  GL_Primitive *pauseImageAuto;
  GL_Primitive *pauseCrewImage;
  GL_Primitive *pauseDoorsImage;
  GL_Primitive *pauseHackingImage;
  GL_Primitive *pauseMindImage;
  GL_Primitive *pauseRoomImage;
  GL_Primitive *pauseTargetImage;
  GL_Primitive *pauseTargetBeamImage;
  GL_Primitive *pauseTeleportLeaveImage;
  GL_Primitive *pauseTeleportArriveImage;
  GL_Primitive *flareImage;
  Point shipPosition;
  std__string locationText;
  std__string loadEvent;
  int loadSector;
  ChoiceBox choiceBox;
  bool gameover;
  bool alreadyWon;
  bool outOfFuel;
  MenuScreen menuBox;
  GameOver gameOverScreen;
  OptionsScreen optionsBox;
  bool bPaused;
  bool bAutoPaused;
  bool menu_pause;
  bool event_pause;
  bool touch_pause;
  int touchPauseReason;
  InputBox inputBox;
  float fShakeTimer;
  TabbedWindow shipScreens;
  TabbedWindow storeScreens;
  Upgrades upgradeScreen;
  CrewManifest crewScreen;
  Equipment equipScreen;
  Location *newLocation;
  SpaceManager *space;
  Button upgradeButton;
  WarningMessage upgradeWarning;
  TextButton storeButton;
  Button optionsButton;
  const float pause_anim_time;
  float pause_animation;
  std__vector_7StoreZ1 storeTrash;
  TimerHelper flickerTimer;
  TimerHelper showTimer;
  bool bHideUI;
  CompleteShip *enemyShip;
  bool waitLocation;
  bool lastLocationWait;
  bool dangerLocation;
  std__vector_3int commandKey;
  bool jumpComplete;
  int mapId;
  ConfirmWindow leaveCrewDialog;
  bool secretSector;
  int activeTouch;
  bool activeTouchIsButton;
  bool activeTouchIsCrewBox;
  bool activeTouchIsShip;
  bool activeTouchIsNull;
  std__vector_3int extraTouches;
  bool bTutorialWasRunning;
  bool focusAteMouse;
  bool choiceBoxOpen;
  int systemDetailsWidth;
  ChoiceBox writeErrorDialog;
  bool suppressWriteError;
};

/* 504 */
struct std__vector_12ProjectileZ1
{
  Projectile **_start;
  Projectile **_finish;
  Projectile **_end;
};

/* 638 */
struct std__queue_12ProjectileZ1
{
  void *_map;
  int _map_size;
  void *_start_cur;
  void *_start_first;
  void *_start_last;
  void *_start_node;
  void *_finish_cur;
  void *_finish_first;
  void *_finish_last;
  void *_finish_node;
};

/* 153 */
struct AsteroidGenerator
{
  std__queue_12ProjectileZ1 asteroidQueue;
  RandomAmount spawnRate[3];
  RandomAmount stateLength[3];
  int numberOfShips;
  int iState;
  int currentSpace;
  int iNextDirection;
  float fStateTimer;
  float timer;
  bool bRunning;
  int initShields;
};

/* 512 */
struct std__vector_13ShipManagerZ1
{
  ShipManager **_start;
  ShipManager **_finish;
  ShipManager **_end;
};

/* 503 */
struct std__vector_12SpaceDroneZ1
{
  SpaceDrone **_start;
  SpaceDrone **_finish;
  SpaceDrone **_end;
};

/* 513 */
struct SpaceManager__FleetShip
{
  GL_Texture *image;
  Point location;
};

/* 253 */
struct Scroller
{
  GL_Texture *imageId;
  int size_x;
  int size_y;
  int image_x;
  int image_y;
  float fSpeed;
  float current_x;
  bool bInitialized;
};

/* 514 */
struct std__vector_11NebulaCloud
{
  NebulaCloud *_start;
  NebulaCloud *_finish;
  NebulaCloud *_end;
};

/* 157 */
struct SpaceManager
{
  std__vector_12ProjectileZ1 projectiles;
  AsteroidGenerator asteroidGenerator;
  std__vector_13ShipManagerZ1 ships;
  std__vector_12SpaceDroneZ1 drones;
  bool dangerZone;
  GL_Texture *currentBack;
  ImageDesc currentPlanet;
  CachedImage planetImage;
  ImageDesc fleetShip;
  GL_Texture *shipIds[8];
  SpaceManager__FleetShip fleetShips[9];
  Scroller asteroidScroller[3];
  GL_Texture *sunImage;
  GL_Texture *sunGlow;
  AnimationTracker sunGlow1;
  AnimationTracker sunGlow2;
  AnimationTracker sunGlow3;
  bool sunLevel;
  bool pulsarLevel;
  GL_Texture *pulsarFront;
  GL_Texture *pulsarBack;
  GL_Texture *lowendPulsar;
  bool bPDS;
  int envTarget;
  Point shipPosition;
  float randomPDSTimer;
  std__vector_12ProjectileZ1 pdsQueue;
  TimerHelper flashTimer;
  AnimationTracker flashTracker;
  ImageDesc currentBeacon;
  ImageDesc currentBeaconFlash;
  AnimationTracker beaconTracker;
  bool flashSound;
  bool bNebula;
  bool bStorm;
  std__vector_11NebulaCloud nebulaClouds;
  GL_Texture *lowendNebula;
  GL_Texture *lowendStorm;
  GL_Texture *lowendSun;
  GL_Texture *lowendAsteroids;
  float shipHealth;
  bool gamePaused;
  TimerHelper pdsFireTimer;
  int pdsCountdown;
  std__vector_9Animation pdsSmokeAnims;
  bool queueScreenShake;
  bool playerShipInFront;
};

/* 515 */
struct std__vector_10LocationZ1
{
  Location **_start;
  Location **_finish;
  Location **_end;
};

/* 588 */
struct std__map_18Point___LocationZ1
{
  char unk[24];
};

/* 413 */
struct DistressButton
{
  TextButton _base;
  TextString labels[2];
  bool state;
};

/* 405 */
struct WindowFrame
{
  Globals__Rect rect;
  GL_Primitive *outline;
  GL_Primitive *mask;
  GL_Primitive *pattern;
};

/* 598 */
struct std__vector_9ImageDesc
{
  ImageDesc *_start;
  ImageDesc *_finish;
  ImageDesc *_end;
};

/* 590 */
struct std__vector_19StarMap__NebulaInfo
{
  StarMap__NebulaInfo *_start;
  StarMap__NebulaInfo *_finish;
  StarMap__NebulaInfo *_end;
};

/* 591 */
struct std__vector_8SectorZ1
{
  Sector **_start;
  Sector **_finish;
  Sector **_end;
};

/* 277 */
struct Location
{
  Pointf loc;
  std__vector_10LocationZ1 connectedLocations;
  bool beacon;
  bool known;
  int visited;
  bool dangerZone;
  bool newSector;
  bool nebula;
  bool boss;
  LocationEvent *event;
  ImageDesc planet;
  ImageDesc space;
  ImageDesc beaconImage;
  GL_Texture *imageId;
  bool questLoc;
  AnimationTracker flashTracker;
  bool fleetChanging;
  std__string planetImage;
  std__string spaceImage;
};

/* 593 */
struct std__map_17std__string___int
{
  char unk[24];
};

/* 596 */
struct std__vector_23std_pair_std_string_int
{
  std__pair_17std__string___int *_start;
  std__pair_17std__string___int *_finish;
  std__pair_17std__string___int *_end;
};

/* 599 */
struct std__map_17LocationZ1___bool
{
  char unk[24];
};

/* 276 */
struct StarMap
{
  FocusWindow _base;
  float visual_size;
  std__vector_10LocationZ1 locations;
  std__map_18Point___LocationZ1 locations_grid;
  std__vector_10LocationZ1 temp_path;
  Location *currentLoc;
  Location *potentialLoc;
  Location *hoverLoc;
  Point position;
  int iPopulatedTiles;
  int iLocationCount;
  int iEmptyTiles;
  bool bInitializedDisplay;
  Pointf translation;
  bool readyToTravel;
  Point dangerZone;
  float dangerZoneRadius;
  float shipRotation[2];
  TextButton endButton;
  TextButton waitButton;
  DistressButton distressButton;
  TextButton jumpButton;
  int worldLevel;
  bool bMapRevealed;
  int pursuitDelay;
  int sectorNameFont;
  WindowFrame mapBorder;
  GL_Primitive *mapBorderTitle;
  GL_Primitive *mapBorderTitleMask;
  GL_Texture *mapBorderSector;
  GL_Texture *mapInsetTextLeft;
  GL_Texture *mapInsetTextMiddle;
  GL_Texture *mapInsetTextRight;
  GL_Texture *mapInsetTextJump;
  GL_Texture *mapInsetWaitDistress;
  GL_Primitive *redLight;
  GL_Primitive *fuelMessage;
  GL_Primitive *waitingMessage;
  GL_Primitive *unexplored;
  GL_Primitive *explored;
  GL_Primitive *danger;
  GL_Primitive *warning;
  GL_Primitive *yellow_warning;
  GL_Primitive *warning_circle;
  GL_Primitive *nebula_circle;
  GL_Texture *boxGreen[3];
  GL_Texture *boxPurple[3];
  GL_Texture *boxWhite[3];
  GL_Primitive *ship;
  GL_Primitive *shipNoFuel;
  GL_Primitive *bossShip;
  GL_Primitive *dangerZoneEdge;
  GL_Texture *dangerZoneTile;
  GL_Primitive *dangerZoneAdvance;
  GL_Primitive *targetBox;
  GL_Primitive *sectorTargetBox_green;
  GL_Primitive *sectorTargetBox_yellow;
  AnimationTracker targetBoxTimer;
  TextButton closeButton;
  WindowFrame *descBox;
  GL_Primitive *shadow;
  GL_Primitive *warning_shadow;
  GL_Primitive *fuelOverlay;
  GL_Primitive *dangerFlash;
  GL_Primitive *mapsBottom[3];
  GL_Texture *dottedLine;
  GL_Texture *cross;
  GL_Texture *boss_jumps_box;
  std__vector_9ImageDesc smallNebula;
  std__vector_9ImageDesc largeNebula;
  std__vector_19StarMap__NebulaInfo currentNebulas;
  ShipManager *shipManager;
  bool outOfFuel;
  AnimationTracker waiting;
  int dangerWaitStart;
  AnimationTracker distressAnim;
  bool bTutorialGenerated;
  std__vector_11std__string delayedQuests;
  std__vector_8SectorZ1 sectors;
  Sector *currentSector;
  Sector *secretSector;
  bool bChoosingNewSector;
  bool bSecretSector;
  Location dummyNewSector;
  int mapsAnalyzed;
  int locationsCreated;
  int shipsCreated;
  std__map_17std__string___int scrapCollected;
  std__map_17std__string___int dronesCollected;
  std__map_17std__string___int fuelCollected;
  std__map_17std__string___int weaponFound;
  std__map_17std__string___int droneFound;
  int bossLoc;
  int arrivedAtBase;
  bool reversedPath;
  bool bossJumping;
  std__vector_10LocationZ1 boss_path;
  bool bossLevel;
  bool boss_wait;
  Pointf bossPosition;
  std__string forceSectorChoice;
  bool bEnemyShip;
  bool bNebulaMap;
  bool bInfiniteMode;
  std__vector_8SectorZ1 lastSectors;
  TextButton closeSectorButton;
  int sectorMapSeed;
  int currentSectorSeed;
  int fuelEventSeed;
  std__string lastEscapeEvent;
  bool waitedLast;
  std__vector_7StoreZ1 storeTrash;
  std__vector_23std_pair_std_string_int addedQuests;
  int bossStage;
  TextString bossMessage;
  WarningMessage *bossJumpingWarning;
  bool crystalAlienFound;
  std__map_17LocationZ1___bool foundMap;
  Point sectorMapOffset;
  int potentialSectorChoice;
  int finalSectorChoice;
  std__vector_13Globals__Rect sectorHitBoxes;
};

/* 498 */
struct std__map_35int___ShipBlueprint__SystemTemplate
{
  char unk[24];
};

/* 500 */
struct std__vector_13CrewBlueprint
{
  CrewBlueprint *_start;
  CrewBlueprint *_finish;
  CrewBlueprint *_end;
};

/* 395 */
struct ShipBlueprint
{
  Blueprint _base;
  Description desc;
  std__string blueprintName;
  TextString name;
  TextString shipClass;
  std__string layoutFile;
  std__string imgFile;
  std__string cloakFile;
  std__string shieldFile;
  std__string floorFile;
  std__map_35int___ShipBlueprint__SystemTemplate systemInfo;
  std__vector_3int systems;
  int droneCount;
  int originalDroneCount;
  int droneSlots;
  std__string loadDrones;
  std__vector_11std__string drones;
  std__vector_11std__string augments;
  int weaponCount;
  int originalWeaponCount;
  int weaponSlots;
  std__string loadWeapons;
  std__vector_11std__string weapons;
  int missiles;
  int drone_count;
  int health;
  int originalCrewCount;
  std__vector_11std__string defaultCrew;
  std__vector_13CrewBlueprint customCrew;
  int maxPower;
  int boardingAI;
  int bp_count;
  int maxCrew;
  int maxSector;
  int minSector;
  TextString unlock;
};

/* 604 */
struct CrewDesc;

struct CrewDesc
{
	std::string type;
	float prop;
	int amount;
};

/* 603 */
struct std__vector_8CrewDesc
{
  CrewDesc *_start;
  CrewDesc *_finish;
  CrewDesc *_end;
};

/* 396 */
struct ShipEvent
{
  bool present;
  std__string name;
  std__string blueprint;
  std__string auto_blueprint;
  std__vector_11std__string blueprintList;
  ShipBlueprint actualBlueprint;
  bool hostile;
  std__string surrender;
  std__string escape;
  std__string destroyed;
  std__string deadCrew;
  std__string gotaway;
  int escapeTimer;
  RandomAmount surrenderThreshold;
  RandomAmount escapeThreshold;
  std__vector_8CrewDesc crewOverride;
  std__vector_11std__string weaponOverride;
  int weaponOverCount;
  std__vector_11std__string droneOverride;
  int droneOverCount;
  int shipSeed;
};

/* 602 */
struct std__vector_21LocationEvent__Choice
{
  LocationEvent__Choice *_start;
  LocationEvent__Choice *_finish;
  LocationEvent__Choice *_end;
};

/* 281 */
struct WorldManager
{
  CompleteShip *playerShip;
  BossShip *bossShip;
  SpaceManager space;
  int currentDifficulty;
  std__vector_14CompleteShipZ1 ships;
  StarMap starMap;
  CommandGui *commandGui;
  LocationEvent *baseLocationEvent;
  LocationEvent *lastLocationEvent;
  ShipEvent currentShipEvent;
  std__vector_12StatusEffect currentEffects;
  std__string startingText;
  Location *newLocation;
  bool bStartedGame;
  bool bLoadingGame;
  bool vAutoSaved;
  bool bExtraChoice;
  std__vector_3int choiceHistory;
  std__string generatedEvent;
  TextString lastMainText;
  int playerCrewCount;
  int killedCrew;
  int playerHull;
  std__vector_3int blueRaceChoices;
  int lastSelectedCrewSeed;
  bool testingBlueprints;
  std__vector_21LocationEvent__Choice originalChoiceList;
};

/* 665 */
struct VTable_GenericButton
{
  void (__thiscall *Free)(GenericButton *this);
  void (__thiscall *Reset)(GenericButton *this);
  void (__thiscall *SetLocation)(GenericButton *this, Point pos);
  void (__thiscall *SetHitBox)(GenericButton *this, Globals__Rect rect);
  void (__thiscall *SetActive)(GenericButton *this, bool active);
  void (__thiscall *OnLoop)(GenericButton *this);
  void (__thiscall *OnRender)(GenericButton *this);
  bool (__thiscall *MouseMove)(GenericButton *this, int x, int y, bool silent);
  void (__thiscall *OnClick)(GenericButton *this);
  void (__thiscall *OnRightClick)(GenericButton *this);
  void (__thiscall *OnTouch)(GenericButton *this);
  void (__thiscall *ResetPrimitives)(GenericButton *this);
};

/* 305 */
struct VTable_Targetable
{
  void (__thiscall *Free)(Targetable *);
  Pointf (__thiscall *GetWorldCenterPoint)(Targetable *);
  Pointf (__thiscall *GetRandomTargettingPoint)(Targetable *, bool unk);
  std__vector_6Pointf (__thiscall *GetAllTargettingPoints)(Targetable *);
  Globals__Ellipse (__thiscall *GetShieldShape)(Targetable *);
  ShieldPower (__thiscall *GetShieldPower)(Targetable *);
  int (__thiscall *GetSpaceId)(Targetable *);
  Pointf (__thiscall *GetSpeed)(Targetable *);
  int (__thiscall *GetOwnerId)(Targetable *);
  int (__thiscall *GetSelfId)(Targetable *);
  bool (__thiscall *IsCloaked)(Targetable *);
  void (__thiscall *DamageTarget)(Targetable *, Pointf pos, Damage damage);
  bool (__thiscall *GetIsDying)(Targetable *);
  bool (__thiscall *GetIsJumping)(Targetable *);
  bool (__thiscall *ValidTarget)(Targetable *);
  Globals__Rect (__thiscall *GetShape)(Targetable *);
};

struct Targetable
{
  VTable_Targetable *_vtable;
  int type;
  bool hostile;
  bool targeted;
};

struct VTable_Collideable
{
  void (__thiscall *Free)(Collideable *);
  CollisionResponse (__thiscall *CollisionMoving)(Collideable *, Pointf start, Pointf finish, Damage damage, bool raytrace);
  bool (__thiscall *DamageBeam)(Collideable *, Pointf current, Pointf last, Damage damage);
  bool (__thiscall *DamageArea)(Collideable *, Pointf location, Damage damage, bool forceHit);
  bool (__thiscall *DamageShield)(Collideable *, Pointf location, Damage damage, bool forceHit);
  bool (__thiscall *GetDodged)(Collideable *);
  Pointf (__thiscall *GetSuperShield)(Collideable *);
  void (__thiscall *SetTempVision)(Collideable *, Pointf location);
  int (__thiscall *GetSpaceId)(Collideable *);
  int (__thiscall *GetSelfId)(Collideable *);
  int (__thiscall *GetOwnerId)(Collideable *);
  bool (__thiscall *ValidTargetLocation)(Collideable *, Pointf location);
};

/* 313 */
struct Collideable
{
  VTable_Collideable *_vtable;
};

/* 710 */
struct std__vector_12ShipSystemZ1
{
  ShipSystem **_start;
  ShipSystem **_finish;
  ShipSystem **_end;
};

/* 295 */
struct EngineSystem;

/* 409 */
struct MedbaySystem;

/* 815 */
struct std__vector_17ArtillerySystemZ1
{
  ArtillerySystem **_start;
  ArtillerySystem **_finish;
  ArtillerySystem **_end;
};

/* 507 */
struct std__vector_17std__vector_4Fire
{
  std__vector_4Fire *_start;
  std__vector_4Fire *_finish;
  std__vector_4Fire *_end;
};

/* 432 */
struct Spreader_Fire
{
  ShipObject _base;
  int count;
  std__vector_3int roomCount;
  std__vector_17std__vector_4Fire grid;
};

/* 501 */
struct std__vector_16std__vector_3int
{
  std__vector_3int *_start;
  std__vector_3int *_finish;
  std__vector_3int *_end;
};

/* 502 */
struct std__vector_7DroneZ1
{
  Drone **_start;
  Drone **_finish;
  Drone **_end;
};

/* 505 */
struct std__map_9int___int
{
  char unk[24];
};

/* 506 */
struct std__vector_17ParticleEmitterZ1
{
  ParticleEmitter **_start;
  ParticleEmitter **_finish;
  ParticleEmitter **_end;
};

/* 193 */
struct ShipManager
{
  ShipObject _base;
  Targetable _targetable;
  Collideable _collideable;
  std__vector_12ShipSystemZ1 vSystemList;
  OxygenSystem *oxygenSystem;
  TeleportSystem *teleportSystem;
  CloakingSystem *cloakSystem;
  BatterySystem *batterySystem;
  MindSystem *mindSystem;
  CloneSystem *cloneSystem;
  HackingSystem *hackingSystem;
  bool showNetwork;
  bool addedSystem;
  uint8_t gap_ex_1[2];
  Shields *shieldSystem;
  WeaponSystem *weaponSystem;
  DroneSystem *droneSystem;
  EngineSystem *engineSystem;
  MedbaySystem *medbaySystem;
  std__vector_17ArtillerySystemZ1 artillerySystems;
  std__vector_12CrewMemberZ1 vCrewList;
  Spreader_Fire fireSpreader;
  Ship ship;
  char statusMessages[40];
  bool bGameOver;
  ShipManager *current_target;
  std__pair_13float___float jump_timer;
  int fuel_count;
  bool hostile_ship;
  bool bDestroyed;
  int iLastDamage;
  AnimationTracker jumpAnimation;
  std__vector_15DamageMessageZ1 damMessages;
  std__vector_3int systemKey;
  int currentScrap;
  bool bJumping;
  bool bAutomated;
  uint8_t gap_ex_2[2];
  int shipLevel;
  ShipBlueprint myBlueprint;
  bool lastEngineStatus;
  bool lastJumpReady;
  bool bContainsPlayerCrew;
  int iIntruderCount;
  std__vector_16std__vector_3int crewCounts;
  int tempDroneCount;
  int tempMissileCount;
  std__vector_9Animation explosions;
  std__vector_4bool tempVision;
  bool bHighlightCrew;
  std__vector_7DroneZ1 droneTrash;
  std__vector_12SpaceDroneZ1 spaceDrones;
  std__vector_12SpaceDroneZ1 newDroneArrivals;
  int bpCount;
  int iCustomizeMode;
  bool bShowRoom;
  std__vector_12ProjectileZ1 superBarrage;
  bool bInvincible;
  std__vector_12SpaceDroneZ1 superDrones;
  GL_Primitive *highlight;
  int failedDodgeCounter;
  std__vector_5float hitByBeam;
  bool enemyDamagedUncloaked;
  int damageCloaked;
  std__map_9int___int killedByBeam;
  int minBeaconHealth;
  std__vector_17ParticleEmitterZ1 fireExtinguishers;
  bool bWasSafe;
};

/* 481 */
struct EquipmentBoxItem
{
  ProjectileFactory *pWeapon;
  Drone *pDrone;
  CrewMember *pCrew;
  const AugmentBlueprint *augment;
};

/* 226 */
struct EquipmentBox
{
  VTable_EquipmentBox *_vtable;
  GL_Primitive *blocked_overlay;
  GL_Color overlayColor;
  std__string imageName;
  GL_Primitive *empty;
  GL_Primitive *full;
  GL_Primitive *selected_empty;
  GL_Primitive *selected_full;
  WeaponSystem *weaponSys;
  DroneSystem *droneSys;
  Point location;
  Globals__Rect hitBox;
  EquipmentBoxItem item;
  bool bMouseHovering;
  bool bGlow;
  bool bBlocked;
  int slot;
  bool bLocked;
  int value;
  bool bPermanentLock;
  bool blockDetailed;
};

/* 227 */
struct CrewEquipBox
{
  EquipmentBox _base;
  ShipManager *ship;
  bool bDead;
  TextButton deleteButton;
  TextButton renameButton;
  bool bShowDelete;
  bool bShowRename;
  bool bQuickRenaming;
  TextInput nameInput;
  GL_Primitive *box;
  GL_Primitive *box_on;
  bool bConfirmDelete;
};

/* 385 */
struct CrewCustomizeBox
{
  CrewEquipBox _base;
  TextButton customizeButton;
  bool bCustomizing;
  Point customizeLocation;
  TextButton acceptButton;
  TextButton bigRenameButton;
  Button leftButton;
  Button rightButton;
  bool bRenaming;
  bool haveCustomizeTouch;
  bool customizeActivated;
  GL_Primitive *box;
  GL_Primitive *box_on;
  GL_Texture *bigBox;
};

/* 329 */
struct SystemBlueprint
{
  Blueprint _base;
  int maxPower;
  int startPower;
  std__vector_3int upgradeCosts;
};

/* 238 */
struct TouchTooltip;

/* 403 */
struct TapBoxFrame
{
  Point location;
  bool useWideBox;
  int boxHeight;
  std__vector_3int buttonHeights;
  std__vector_14GL_PrimitiveZ1 primitives;
  Globals__Rect hitBox;
};

/* 202 */
struct SystemBox
{
  VTable_SystemBox *_vtable;
  Point location;
  GL_Primitive *timerCircle[10];
  GL_Primitive *timerLines;
  GL_Primitive *timerStencil;
  int lastTimerStencilCount;
  GL_Primitive *brokenIcon;
  GL_Primitive *lockIcon;
  GL_Primitive *hackIcon;
  ShipSystem *pSystem;
  bool bShowPower;
  float powerAlpha;
  bool mouseHover;
  int activeTouch;
  Point touchInitialOffset;
  bool tapped;
  bool draggingPower;
  int dragInitialPower;
  float lastDragSpeed;
  int lastDragY;
  double lastDragTime;
  WarningMessage warning;
  int topPower;
  Globals__Rect hitBox;
  int hitBoxTop;
  bool hitBoxTopWasSet;
  GL_Texture *wireImage;
  bool bSimplePower;
  bool bPlayerUI;
  bool useLargeTapIcon;
  Point largeTapIconOffset;
  std__vector_3int tapButtonHeights;
  int tapButtonOffsetY;
  int cooldownOffsetY;
  float keyPressed;
  TouchTooltip *touchTooltip;
  TapBoxFrame tapBoxFrame;
  bool lockedOpen;
};

/* 205 */
struct SystemCustomBox
{
  SystemBox _base;
  ShipManager *shipManager;
  Button button;
};

/* 652 */
struct std__vector_14CAchievementZ1
{
  CAchievement **_start;
  CAchievement **_finish;
  CAchievement **_end;
};

/* 407 */
struct ShipButton
{
  Button _base;
  GL_Texture *iShipImage;
  bool bShipLocked;
  bool bLayoutLocked;
  bool bNoExist;
  std__vector_14CAchievementZ1 achievements;
  int iSelectedAch;
  bool bSelected;
};

/* 222 */
struct UnlockArrow
{
  int direction;
  int status;
  Globals__Rect shape;
};

/* 300 */
struct ChoiceText
{
  int type;
  std__string text;
  ResourceEvent rewards;
};

/* 627 */
struct Damage
{
  int iDamage;
  int iShieldPiercing;
  int fireChance;
  int breachChance;
  int stunChance;
  int iIonDamage;
  int iSystemDamage;
  int iPersDamage;
  bool bHullBuster;
  int ownerId;
  int selfId;
  bool bLockdown;
  bool crystalShard;
  bool bFriendlyFire;
  int iStun;
};

/* 641 */
struct EffectsBlueprint
{
  std__vector_11std__string launchSounds;
  std__vector_11std__string hitShipSounds;
  std__vector_11std__string hitShieldSounds;
  std__vector_11std__string missSounds;
  std__string image;
};

/* 642 */
struct std__vector_31WeaponBlueprint__MiniProjectile
{
  WeaponBlueprint__MiniProjectile *_start;
  WeaponBlueprint__MiniProjectile *_finish;
  WeaponBlueprint__MiniProjectile *_end;
};

/* 640 */
struct WeaponBlueprint__BoostPower
{
  int type;
  float amount;
  int count;
};

/* 346 */
struct WeaponBlueprint
{
  Blueprint _base;
  std__string typeName;
  Damage damage;
  int shots;
  int missiles;
  float cooldown;
  int power;
  int length;
  float speed;
  int miniCount;
  EffectsBlueprint effects;
  std__string weaponArt;
  std__string combatIcon;
  std__string explosion;
  int radius;
  std__vector_31WeaponBlueprint__MiniProjectile miniProjectiles;
  WeaponBlueprint__BoostPower boostPower;
  int drone_targetable;
  int spin;
  int chargeLevels;
  TextString flavorType;
  GL_Color color;
};

/* 324 */
struct DroneBlueprint
{
  Blueprint _base;
  std__string typeName;
  int level;
  int targetType;
  int power;
  float cooldown;
  int speed;
  int dodge;
  std__string weaponBlueprint;
  std__string droneImage;
  std__string combatIcon;
};

/* 330 */
struct AugmentBlueprint
{
  Blueprint _base;
  float value;
  bool stacking;
};

/* 688 */
struct VTable_Blueprint
{
  void (__thiscall *Free)(Blueprint *this);
  void (__thiscall *RenderIcon)(Blueprint *this, float unk);
  std__string (__stdcall *GetNameLong)(Blueprint *this);
  std__string (__stdcall *GetNameShort)(Blueprint *this);
  int (__thiscall *GetType)(Blueprint *this);
};

/* 520 */
struct std__vector_8GL_Color
{
  GL_Color *_start;
  GL_Color *_finish;
  GL_Color *_end;
};

/* 570 */
struct ShipAchievementInfo
{
  CAchievement *achievement;
  Point position;
  int dimension;
};

/* 248 */
struct ControlButton
{
  Globals__Rect rect;
  std__string value;
  TextString desc;
  std__string key;
  int state;
  int descLength;
};

/* 382 */
struct Path
{
  Point start;
  std__vector_6DoorZ1 doors;
  Point finish;
  float distance;
};

/* 516 */
struct Slot
{
  int roomId;
  int slotId;
  Point worldLocation;
};

/* 259 */
struct CachedRect
{
  CachedPrimitive _base;
  int x;
  int y;
  int w;
  int h;
};

/* 187 */
struct BoardingGoal
{
  float fHealthLimit;
  int causedDamage;
  int targetsDestroyed;
  int target;
  int damageType;
};

/* 517 */
struct CrewTask
{
  int taskId;
  int room;
  int system;
};

/* 522 */
struct SCrewStats
{
  std__vector_3int stat;
  std__string species;
  std__string name;
  bool male;
};

/* 525 */
struct std__vector_30std__vector_16AnimationTracker
{
  std__vector_16AnimationTracker *_start;
  std__vector_16AnimationTracker *_finish;
  std__vector_16AnimationTracker *_end;
};

/* 183 */
struct CrewMember
{
  VTable_CrewMember *_vtable;
  int iShipId;
  float x;
  float y;
  float size;
  float scale;
  float goal_x;
  float goal_y;
  int width;
  int height;
  std__pair_13float___float health;
  float speed_x;
  float speed_y;
  Path path;
  bool new_path;
  float x_destination;
  float y_destination;
  Door *last_door;
  Repairable *currentRepair;
  bool bSuffocating;
  int moveGoal;
  int selectionState;
  int iRoomId;
  int iManningId;
  int iRepairId;
  int iStackId;
  Slot currentSlot;
  bool intruder;
  bool bFighting;
  bool bSharedSpot;
  CrewAnimation *crewAnim;
  GL_Texture *selectionImage;
  CachedImage healthBox;
  CachedImage healthBoxRed;
  CachedRect healthBar;
  float fMedbay;
  float lastDamageTimer;
  float lastHealthChange;
  int currentShipId;
  AnimationTracker flashHealthTracker;
  Pointf currentTarget;
  CrewTarget *crewTarget;
  BoardingGoal boardingGoal;
  bool bFrozen;
  bool bFrozenLocation;
  CrewTask task;
  std__string type;
  Ship *ship;
  Slot finalGoal;
  Door *blockingDoor;
  bool bOutOfGame;
  std__string species;
  bool bDead;
  uint8_t gap_ex_1[2];
  int iOnFire;
  bool bActiveManning;
  ShipSystem *currentSystem;
  int usingSkill;
  CrewBlueprint blueprint;
  Animation healing;
  Animation stunned;
  AnimationTracker levelUp;
  int lastLevelUp;
  SCrewStats stats;
  std__vector_17std__vector_4bool skillsEarned;
  bool clone_ready;
  bool bMindControlled;
  int iDeathNumber;
  Animation mindControlled;
  Animation stunIcon;
  std__vector_30std__vector_16AnimationTracker skillUp;
  int healthBoost;
  float fMindDamageBoost;
  float fCloneDying;
  bool bResisted;
  uint8_t gap_ex_2[2];
  Slot savedPosition;
  float fStunTime;
  CachedImage movementTarget;
  bool bCloned;
};

/* 416 */
struct WarningWithLines
{
  WarningMessage _base;
  GL_Primitive *linePrimitive;
  Point textOrigin;
  TextString topText;
  TextString bottomText;
  int topTextLimit;
  int bottomTextLimit;
};

/* 267 */
struct DamageMessage
{
  AnimationTracker tracker;
  Pointf position;
  GL_Color color;
  bool bFloatDown;
  std__vector_14GL_PrimitiveZ1 primitives;
};

/* 217 */
struct CrewBox
{
  Globals__Rect box;
  Globals__Rect skillBox;
  CrewMember *pCrew;
  bool mouseHover;
  uint8_t gap_ex_1[2];
  TextButton powerButton;
  int number;
  bool bSelectable;
  uint8_t gap_ex_2[2];
  AnimationTracker flashHealthTracker;
  GL_Primitive *boxBackground;
  GL_Primitive *boxOutline;
  GL_Primitive *skillBoxBackground;
  GL_Primitive *skillBoxOutline;
  GL_Primitive *cooldownBar;
  CachedImage healthWarning;
  int lastCooldownHeight;
  GL_Primitive *healthBar;
  int lastHealthWidth;
  Animation mindControlled;
  Animation stunned;
  bool hideExtra;
  std__string sTooltip;
};

/* 215 */
struct VTable_ArmamentBox
{
  void (__thiscall *Free)(ArmamentBox *this);
  bool (__thiscall *Empty)(ArmamentBox *this);
  std__string (__thiscall *Name)(ArmamentBox *this);
  bool (__thiscall *Powered)(ArmamentBox *this);
  void (__thiscall *SetDefaultAutofire)(ArmamentBox *this, bool val);
  int (__thiscall *RealRequiredPower)(ArmamentBox *this);
  int (__thiscall *GetBonusPower)(ArmamentBox *this);
  std__string (__thiscall *GetType)(ArmamentBox *this);
  GL_Color (__thiscall *StatusColor)(ArmamentBox *this);
  std__string (__thiscall *GenerateTooltip)(ArmamentBox *this);
  void (__thiscall *OnLoop)(ArmamentBox *this);
  void (__thiscall *RenderTouchTooltip)(ArmamentBox *this, int spaceToTop);
  void (__thiscall *OnRender)(ArmamentBox *this, bool dragging, bool flashPowerBox);
  void (__thiscall *RenderBox)(ArmamentBox *this, bool dragging, bool flashPowerBox);
  void (__thiscall *RenderLabels)(ArmamentBox *this);
  void (__thiscall *RenderIcon)(ArmamentBox *this, Point &p);
  

};

struct ArmamentBox
{
  VTable_ArmamentBox *_vtable;
  std__vector_14GL_PrimitiveZ1 background;
  GL_Primitive *emptyBackground;
  GL_Primitive *hoverHighlight;
  GL_Primitive *outline;
  GL_Primitive *emptyOutline;
  GL_Primitive *powerBarGlow[4];
  GL_Primitive *iconBackground;
  GL_Primitive *iconInsetBackground;
  GL_Primitive *icon;
  GL_Primitive *iconDoubleSize;
  std__string iconName;
  std__string iconBackgroundName;
  Point lastIconPos;
  Point location;
  int xOffset;
  Point largeIconOffset;
  Point nameOffset;
  int nameWidth;
  bool mouseHover;
  bool touchHover;
  bool touchHighlight;
  bool selected;
  int hotKey;
  int activeTouch;
  TouchTooltip *touchTooltip;
  Animation hackAnimation;
  GL_Primitive *touchButtonBorder;
  Globals__Rect touchButtonBorderRect;
  float touchButtonSlidePos;
  std__vector_15GenericButtonZ1 touchButtons;
  Globals__Rect touchButtonHitbox;
  GL_Color iconColor;
  bool droneVariation;
  bool bIoned;
};

/* 154 */
struct ProjectileFactory
{
  ShipObject _base;
  std__pair_13float___float cooldown;
  std__pair_13float___float subCooldown;
  float baseCooldown;
  const WeaponBlueprint *blueprint;
  Point localPosition;
  Animation flight_animation;
  bool autoFiring;
  bool fireWhenReady;
  bool powered;
  int requiredPower;
  std__vector_6Pointf targets;
  std__vector_6Pointf lastTargets;
  int targetId;
  int iAmmo;
  std__string name;
  int numShots;
  float currentFiringAngle;
  float currentEntryAngle;
  Targetable *currentShipTarget;
  CloakingSystem *cloakingSystem;
  WeaponAnimation weaponVisual;
  WeaponMount mount;
  std__vector_12ProjectileZ1 queuedProjectiles;
  int iBonusPower;
  bool bFiredOnce;
  int iSpendMissile;
  float cooldownModifier;
  int shotsFiredAtTarget;
  int radius;
  int boostLevel;
  int lastProjectileId;
  int chargeLevel;
  int iHackLevel;
  int goalChargeLevel;
  bool isArtillery;
};

/* 554 */
struct std__vector_12RepairableZ1
{
  Repairable **_start;
  Repairable **_finish;
  Repairable **_end;
};

/* 555 */
struct std__vector_8CrewTask
{
  CrewTask *_start;
  CrewTask *_finish;
  CrewTask *_end;
};

/* 283 */
struct CrewAI
{
  ShipManager *ship;
  bool bAIon;
  bool bAirlockRequested;
  bool bMedbayRequested;
  bool bHurtCrew;
  bool bCalmShip;
  std__vector_12CrewMemberZ1 crewList;
  std__vector_12CrewMemberZ1 intruderList;
  std__vector_12RepairableZ1 hullBreaches;
  std__vector_8CrewTask desiredTaskList;
  std__vector_8CrewTask bonusTaskList;
  std__vector_4bool breachedRooms;
  int iTeleportRequest;
  bool bUrgentTeleport;
  int startingCrewCount;
  bool bMultiracialCrew;
  bool bOverrideRace;
};

/* 394 */
struct CombatAI
{
  ShipManager *target;
  std__vector_19ProjectileFactoryZ1 weapons;
  std__vector_12SpaceDroneZ1 drones;
  int stance;
  std__vector_3int system_targets;
  bool bFiringWhileCloaked;
  ShipManager *self;
};

/* 553 */
struct std__map_26std__string___PowerProfile
{
  char unk[24];
};

/* 282 */
struct ShipAI
{
  ShipManager *ship;
  ShipManager *target;
  CrewAI crewAI;
  CombatAI combatAI;
  bool playerShip;
  bool surrendered;
  bool escaping;
  bool destroyed;
  int surrenderThreshold;
  int escapeThreshold;
  float escapeTimer;
  int lastMaxPower;
  std__map_26std__string___PowerProfile powerProfiles;
  int boardingProfile;
  int iTeleportRequest;
  int iTeleportTarget;
  int brokenSystems;
  int boardingAi;
  int iCrewNeeded;
  bool bStalemateTrigger;
  char field_ED[3];
  float fStalemateTimer;
  int lastHealth;
  bool bBoss;
  char field_F9[3];
  int iTimesTeleported;
};

/* 152 */
struct CompleteShip
{
  VTable_CompleteShip *_vtable;
  int iShipId;
  ShipManager *shipManager;
  SpaceManager *spaceManager;
  CompleteShip *enemyShip;
  bool bPlayerShip;
  ShipAI shipAI;
  std__vector_12CrewMemberZ1 arrivingParty;
  std__vector_12CrewMemberZ1 leavingParty;
  int teleTargetRoom;
};

/* 174 */
struct VTable_Drone
{
  void (__thiscall *Free)(Drone *);
  void (__thiscall *OnInit)(Drone *);
  void (__thiscall *OnLoop)(Drone *);
  void (__thiscall *OnDestroy)(Drone *);
  void (__thiscall *SetPowered)(Drone *, bool _powered);
  void (__thiscall *SetInstantPowered)(Drone *);
  bool (__thiscall *GetPowered)(Drone *);
  void (__thiscall *SetCurrentShip)(Drone *, int shipId);
  void (__thiscall *SetDeployed)(Drone *, bool _deployed);
  void (__thiscall *SetDestroyed)(Drone *, bool dead, bool setTimer);
  void (__thiscall *SetHacked)(Drone *, int level);
  bool (__thiscall *GetDeployed)(Drone *);
  bool (__thiscall *NeedsRoom)(Drone *);
  void (__thiscall *SetSlot)(Drone *, int room, int slot);
  bool (__thiscall *Destroyed)(Drone *);
  Point (__thiscall *GetWorldLocation)(Drone *);
  void (__thiscall *SetWorldLocation)(Drone *, Point point);
  static Slot *(__stdcall *GetDroneSlot)(Slot *slot, Drone *drone);
  int (__thiscall *GetDroneHealth)(Drone *);
  int (__thiscall *GetRequiredPower)(Drone *);
  void (__thiscall *RenderIcon)(Drone *);
  static std__string *(__stdcall *GetName)(std__string *str, Drone *drone);
  bool (__thiscall *CanBeDeployed)(Drone *);
  bool (__thiscall *RecallOnJump)(Drone *);
  bool (__thiscall *CanBeRecovered)(Drone *);
  void (__thiscall *SaveState)(Drone *, int fh);
  void (__thiscall *LoadState)(Drone *, int fh);
  void (__thiscall *BlowUp)(Drone *, bool silent);
  bool (__thiscall *GetStunned)(Drone *);
};

struct Drone
{
  VTable_Drone *_vtable;
  int iShipId;
  int selfId;
  bool powered;
  int powerRequired;
  bool deployed;
  int type;
  const DroneBlueprint *blueprint;
  bool bDead;
  int iBonusPower;
  bool poweredAtLocation;
  float destroyedTimer;
  int iHackLevel;
  float hackTime;
};

/* 160 */
struct VTable_SpaceDrone
{
  void (__thiscall *PickDestination)(SpaceDrone *);
  void (__thiscall *PickTarget)(SpaceDrone *);
  bool (__thiscall *HasTarget)(SpaceDrone *);
  bool (__thiscall *ValidTarget)(SpaceDrone *);
  float (__thiscall *GetWeaponCooldown)(SpaceDrone *);
  void (__thiscall *RandomizeStartingPosition)(SpaceDrone *);
  bool (__thiscall *HideUnderOwner)(SpaceDrone *);
  Projectile* (__thiscall *GetNextProjectile)(SpaceDrone *);
  void (__thiscall *SetMovementTarget)(SpaceDrone *, Targetable *target);
  void (__thiscall *SetWeaponTarget)(SpaceDrone *, Targetable *target);
  bool (__thiscall *ValidTargetObject)(SpaceDrone *, Targetable *target);
  void (__thiscall *OnRender)(SpaceDrone *, int space);
  void (__thiscall *RenderDrone)(SpaceDrone *);
  static std__string *(__stdcall *GetTooltip)(std__string *str, SpaceDrone *drone);
  Pointf (__thiscall *GetWorldCenterPoint)(SpaceDrone *);
  void (__thiscall *SetCurrentLocation)(SpaceDrone *, Pointf pos);
  void (__thiscall *MouseMove)(SpaceDrone *, int mX, int mY);
  Pointf (__thiscall *GetRandomTargettingPoint)(SpaceDrone *, bool unk);
  static Globals__Ellipse *(__stdcall *GetShieldShape)(Globals__Ellipse *ret, SpaceDrone *drone);
  int (__thiscall *GetSpaceId)(SpaceDrone *);
  Pointf (__thiscall *GetSpeed)(SpaceDrone *);
  int (__thiscall *GetOwnerId)(SpaceDrone *);
  int (__thiscall *GetSelfId)(SpaceDrone *);
  CollisionResponse (__thiscall *CollisionMoving)(SpaceDrone *, Pointf start, Pointf finish, Damage damage, bool raytrace);
  bool (__thiscall *DamageBeam)(SpaceDrone *, Pointf pos1, Pointf pos2, Damage damage);
  bool (__thiscall *DamageArea)(SpaceDrone *, Pointf pos, Damage damage, bool unk);
  BoarderDrone *(__thiscall *GetBoardingDrone)(SpaceDrone *);
};

struct SpaceDrone
{
  VTable_SpaceDrone *_vtable;
  Drone _base;
  Targetable _targetable;
  Collideable _collideable;
  int currentSpace;
  int destinationSpace;
  Pointf currentLocation;
  Pointf lastLocation;
  Pointf destinationLocation;
  Pointf pointTarget;
  Animation explosion;
  Targetable *weaponTarget;
  Pointf targetLocation;
  Pointf targetSpeed;
  Targetable *movementTarget;
  Pointf speedVector;
  bool poweredLastFrame;
  bool deployedLastFrame;
  bool bFire;
  float pause;
  float additionalPause;
  float weaponCooldown;
  float current_angle;
  float aimingAngle;
  float lastAimingAngle;
  float desiredAimingAngle;
  DamageMessage *message;
  Animation weapon_animation;
  const WeaponBlueprint *weaponBlueprint;
  int lifespan;
  bool bLoadedPosition;
  bool bDisrupted;
  float hackAngle;
  float ionStun;
  Pointf beamCurrentTarget;
  Pointf beamFinalTarget;
  float beamSpeed;
  Animation hackSparks;
};

/* 232 */
struct UpgradeBox
{
  ShipSystem *system;
  ShipManager *ship;
  const SystemBlueprint *blueprint;
  Point location;
  int tempUpgrade;
  Button *currentButton;
  std__string buttonBaseName;
  Button maxButton;
  Button boxButton;
  bool subsystem;
  bool isDummy;
  GL_Primitive *dummyBox;
};

/* 228 */
struct AugmentEquipBox
{
  EquipmentBox _base;
  ShipManager *ship;
};

/* 694 */
struct std__vector_10StoreBoxZ1
{
  StoreBox **_start;
  StoreBox **_finish;
  StoreBox **_end;
};

/* 198 */
struct Store
{
  FocusWindow _base;
  GL_Texture *box;
  TextString headingTitle[4];
  Button page1;
  Button page2;
  ConfirmWindow confirmDialog;
  Button *currentButton;
  Description currentDescription;
  std__string unavailable;
  std__vector_10StoreBoxZ1 vStoreBoxes;
  std__vector_10StoreBoxZ1 vItemBoxes;
  ShipManager *shopper;
  int selectedWeapon;
  int selectedDrone;
  InfoBox infoBox;
  Point infoBoxLoc;
  Button exitButton;
  int worldLevel;
  int sectionCount;
  int types[4];
  bool bShowPage2;
  uint8_t gap_ex_2[2];
  StoreBox *confirmBuy;
  int forceSystemInfoWidth;
};

/* 151 */
struct BossShip
{
  CompleteShip _base;
  int currentStage;
  TimerHelper powerTimer;
  int powerCount;
  std__vector_3int crewCounts;
  bool bDeathBegan;
  int nextStage;
};

struct VTable_Projectile
{
  void (__thiscall *SetWeaponAnimation)(Projectile *, WeaponAnimation *animation);
  void (__thiscall *OnRenderSpecific)(Projectile *, int spaceId);
  void (__thiscall *CollisionCheck)(Projectile *, Collideable *object);
  void (__thiscall *OnUpdate)(Projectile *);
  Pointf (__thiscall *GetWorldCenterPoint)(Projectile *);
  Pointf (__thiscall *GetRandomTargettingPoint)(Projectile *, bool valuable);
  void (__thiscall *ComputeHeading)(Projectile *);
  void (__thiscall *SetDestinationSpace)(Projectile *, int space);
  void (__thiscall *EnterDestinationSpace)(Projectile *);
  bool (__thiscall *Dead)(Projectile *);
  bool (__thiscall *ValidTarget)(Projectile *);
  void (__thiscall *Kill)(Projectile *);
  Pointf (__thiscall *GetSpeed)(Projectile *);
  void (__thiscall *SetDamage)(Projectile *, Damage damage);
  int (__thiscall *ForceRenderLayer)(Projectile *);
  void (__thiscall *SetSpin)(Projectile *, float spin);
  void (__thiscall *SaveProjectile)(Projectile *, int fd);
  void (__thiscall *LoadProjectile)(Projectile *, int fd);
  int (__thiscall *GetType)(Projectile *);
  void (__thiscall *SetMovingTarget)(Projectile *, Targetable *target);
};

/* 171 */
struct Projectile
{
  VTable_Projectile *_vtable;
  Collideable _base;
  Targetable _targetable;
  Pointf position;
  Pointf last_position;
  float speed_magnitude;
  Pointf target;
  float heading;
  int ownerId;
  unsigned int selfId;
  Damage damage;
  float lifespan;
  int destinationSpace;
  int currentSpace;
  int targetId;
  bool dead;
  uint8_t gap_ex_1[2];
  Animation death_animation;
  Animation flight_animation;
  Pointf speed;
  bool missed;
  bool hitTarget;
  uint8_t gap_ex_2[2];
  std__string hitSolidSound;
  std__string hitShieldSound;
  std__string missSound;
  float entryAngle;
  bool startedDeath;
  bool passedTarget;
  bool bBroadcastTarget;
  AnimationTracker flashTracker;
  GL_Color color;
};

/* 158 */
struct NebulaCloud
{
  Point pos;
  float currAlpha;
  float currScale;
  float deltaAlpha;
  float deltaScale;
  float newTrigger;
  bool newCloud;
  bool bLightning;
  AnimationTracker lightningFlash;
  float flashTimer;
  float lightningRotation;
};

/* 589 */
struct StarMap__NebulaInfo
{
  GL_Primitive *primitive;
  int x;
  int y;
  int w;
  int h;
};

/* 612 */
struct std__vector_32std_pair_std_string_RandomAmount
{
  std__pair_26std__string___RandomAmount *_start;
  std__pair_26std__string___RandomAmount *_finish;
  std__pair_26std__string___RandomAmount *_end;
};

/* 333 */
struct SectorDescription
{
  std__vector_32std_pair_std_string_RandomAmount eventCounts;
  std__vector_23std_pair_std_string_int rarities;
  bool unique;
  std__vector_10TextString names;
  std__vector_10TextString shortNames;
  std__vector_11std__string musicTracks;
  std__string type;
  TextString name;
  TextString shortName;
  int minSector;
  bool used;
  std__string firstEvent;
};

/* 592 */
struct Sector
{
  int type;
  bool visited;
  bool reachable;
  std__vector_8SectorZ1 neighbors;
  Point location;
  int level;
  SectorDescription description;
};

/* 393 */
struct LocationEvent
{
  TextString text;
  ShipEvent ship;
  ResourceEvent stuff;
  int environment;
  int environmentTarget;
  bool store;
  bool gap_ex_cleared;
  int fleetPosition;
  bool beacon;
  bool reveal_map;
  bool distressBeacon;
  bool repair;
  int modifyPursuit;
  Store *pStore;
  std__vector_11EventDamage damage;
  std__string quest;
  std__vector_12StatusEffect statusEffects;
  std__vector_30std_pair_std_string_std_string nameDefinitions;
  std__string spaceImage;
  std__string planetImage;
  std__string eventName;
  ResourceEvent reward;
  BoardingEvent boarders;
  std__vector_21LocationEvent__Choice choices;
  int unlockShip;
  TextString unlockShipText;
  bool secretSector;
};

/* 623 */
struct std__pair_17std__string___int
{
  std__string _first;
  int _second;
};

/* 321 */
struct LocationEvent__Choice
{
  LocationEvent *event;
  TextString text;
  ChoiceReq requirement;
  bool hiddenReward;
};

/* 264 */
struct CachedRectOutline
{
  CachedPrimitive _base;
  int x;
  int y;
  int w;
  int h;
  int thickness;
};

/* 293 */
struct ShipSystem
{
  VTable_ShipSystem *_vtable;
  int selectedState;
  ShipObject _shipObj;
  float fDamage;
  Point pLoc;
  float fMaxDamage;
  std__string name;
  int roomId;
  int iRepairCount;
  int iSystemType;
  bool bNeedsManned;
  bool bManned;
  uint8_t gap_ex_1[2];
  int iActiveManned;
  bool bBoostable;
  uint8_t gap_ex_2[2];
  std__pair_9int___int powerState;
  int iRequiredPower;
  GL_Texture *imageIcon;
  GL_Primitive *iconPrimitive;
  GL_Primitive *iconBorderPrimitive;
  GL_Primitive *iconPrimitives[20];
  CachedRect partialDamageRect;
  CachedRectOutline lockOutline;
  Globals__Rect roomShape;
  bool bOnFire;
  bool bBreached;
  std__pair_9int___int healthState;
  float fDamageOverTime;
  float fRepairOverTime;
  bool damagedLastFrame;
  bool repairedLastFrame;
  int originalPower;
  bool bNeedsPower;
  int iTempPowerCap;
  int iTempPowerLoss;
  int iTempDividePower;
  int iLockCount;
  TimerHelper lockTimer;
  bool bExploded;
  bool bOccupied;
  bool bFriendlies;
  std__string interiorImageName;
  GL_Primitive *interiorImage;
  GL_Primitive *interiorImageOn;
  GL_Primitive *interiorImageManned;
  GL_Primitive *interiorImageMannedFancy;
  int lastUserPower;
  int iBonusPower;
  int iLastBonusPower;
  Pointf location;
  int bpCost;
  AnimationTracker flashTracker;
  int maxLevel;
  int iBatteryPower;
  int iHackEffect;
  bool bUnderAttack;
  bool bLevelBoostable;
  bool bTriggerIon;
  std__vector_9Animation damagingEffects;
  int computerLevel;
};

/* 284 */
struct OxygenSystem
{
  ShipSystem _base;
  float max_oxygen;
  std__vector_5float oxygenLevels;
  float fTotalOxygen;
  bool bLeakingO2;
};

/* 298 */
struct TeleportSystem
{
  ShipSystem _base;
  float chargeLevel;
  bool bCanSend;
  bool bCanReceive;
  int iArmed;
  std__vector_4bool crewSlots;
  int iPreparedCrew;
  int iNumSlots;
  bool bSuperShields;
};

/* 287 */
struct CloakingSystem
{
  ShipSystem _base;
  bool bTurnedOn;
  TimerHelper timer;
  std__string soundeffect;
  AnimationTracker glowTracker;
  GL_Primitive *glowImage;
};

/* 286 */
struct BatterySystem
{
  ShipSystem _base;
  bool bTurnedOn;
  TimerHelper timer;
  std__string soundeffect;
};

/* 288 */
struct MindSystem
{
  ShipSystem _base;
  std__pair_13float___float controlTimer;
  bool bCanUse;
  int iArmed;
  std__vector_12CrewMemberZ1 controlledCrew;
  bool bSuperShields;
  bool bBlocked;
  int iQueuedTarget;
  int iQueuedShip;
  std__vector_12CrewMemberZ1 queuedCrew;
};

/* 704 */
struct std__map_23std__string___Animation
{
  char unk[24];
};

/* 296 */
struct CloneSystem
{
  ShipSystem _base;
  float fTimeToClone;
  CrewMember *clone;
  float fTimeGoal;
  float fDeathTime;
  GL_Texture *bottom;
  GL_Texture *top;
  GL_Texture *gas;
  int slot;
  Animation *currentCloneAnimation;
  std__map_23std__string___Animation cloneAnimations;
};

/* 169 */
struct HackingDrone
{
  SpaceDrone _base;
  Pointf startingPosition;
  GL_Texture *droneImage_on;
  GL_Texture *droneImage_off;
  GL_Texture *lightImage;
  Pointf finalDestination;
  bool arrived;
  bool finishedSetup;
  AnimationTracker flashTracker;
  Animation flying;
  Animation extending;
  Animation explosion;
  int prefRoom;
};

/* 285 */
struct HackingSystem
{
  ShipSystem _base;
  bool bHacking;
  HackingDrone drone;
  bool bBlocked;
  bool bArmed;
  ShipSystem *currentSystem;
  std__pair_13float___float effectTimer;
  bool bCanHack;
  ShipSystem *queuedSystem;
  int spendDrone;
};

/* 818 */
struct ShieldPower
{
  int first;
  int second;
  std__pair_9int___int super;
};

/* 819 */
struct Shields__Shield
{
  float charger;
  ShieldPower power;
  float superTimer;
};

/* 817 */
struct std__vector_24Shields__ShieldAnimation
{
  Shields__ShieldAnimation *_start;
  Shields__ShieldAnimation *_finish;
  Shields__ShieldAnimation *_end;
};

/* 289 */
struct Shields
{
  ShipSystem _base;
  float ellipseRatio;
  Point center;
  Globals__Ellipse baseShield;
  int iHighlightedSide;
  float debug_x;
  float debug_y;
  Shields__Shield shields;
  bool shields_shutdown;
  std__vector_24Shields__ShieldAnimation shieldHits;
  AnimationTracker shieldsDown;
  bool superShieldDown;
  Pointf shieldsDownPoint;
  AnimationTracker shieldsUp;
  GL_Texture *shieldImage;
  GL_Primitive *shieldPrimitive;
  std__string shieldImageName;
  bool bEnemyPresent;
  std__vector_15DamageMessageZ1 damMessages;
  bool bBarrierMode;
  float lastHitTimer;
  float chargeTime;
  int lastHitShieldLevel;
  AnimationTracker superShieldUp;
  Point superUpLoc;
  bool bExcessChargeHack;
};

/* 291 */
struct WeaponSystem
{
  ShipSystem _base;
  Pointf target;
  std__vector_19ProjectileFactoryZ1 weapons;
  std__vector_19ProjectileFactoryZ1 weaponsTrashList;
  float shot_timer;
  int shot_count;
  int missile_count;
  int missile_start;
  CloakingSystem *cloakingSystem;
  std__vector_4bool userPowered;
  int slot_count;
  int iStartingBatteryPower;
  std__vector_4bool repowerList;
};

/* 292 */
struct DroneSystem
{
  ShipSystem _base;
  std__vector_7DroneZ1 drones;
  int drone_count;
  int drone_start;
  Targetable *targetShip;
  std__vector_4bool userPowered;
  int slot_count;
  int iStartingBatteryPower;
  std__vector_4bool repowerList;
};

/* 290 */
struct ArtillerySystem
{
  ShipSystem _base;
  ProjectileFactory *projectileFactory;
  Targetable *target;
  bool bCloaked;
};

/* 448 */
struct std__vector_4Fire
{
  Fire *_start;
  Fire *_finish;
  Fire *_end;
};

/* 676 */
struct Particle
{
  float position_x;
  float position_y;
  float speed_x;
  float speed_y;
  float acceleration_x;
  float acceleration_y;
  float lifespan;
  bool alive;
};

/* 390 */
struct ParticleEmitter
{
  Particle particles[64];
  float birthRate;
  float birthCounter;
  float lifespan;
  float speedMag;
  float position_x;
  float position_y;
  float max_dx;
  float min_dx;
  float max_dy;
  float min_dy;
  int image_x;
  int image_y;
  GL_Primitive *primitive;
  float emitAngle;
  bool randAngle;
  bool running;
  float maxAlpha;
  float minSize;
  float maxSize;
  int currentCount;
};

/* 620 */
struct VTable_EquipmentBox
{
  void (__thiscall *Free)(EquipmentBox *this);
  void (__thiscall *SetPosition)(EquipmentBox *this, Point pos);
  void (__thiscall *OnRender)(EquipmentBox *this, bool empty);
  void (__thiscall *RenderLabels)(EquipmentBox *this, bool empty);
  void (__thiscall *RenderIcon)(EquipmentBox *this, bool empty);
  void (__thiscall *SetShipManager)(EquipmentBox *this, ShipManager *ship);
  void (__thiscall *MouseMove)(EquipmentBox *this, int x, int y);
  void (__thiscall *OnTouch)(EquipmentBox *this);
  void (__thiscall *UpdateBoxImage)(EquipmentBox *this, bool unk);
  void (__thiscall *Restart)(EquipmentBox *this);
  void (__thiscall *AddItem)(EquipmentBox *this, EquipmentBoxItem item);
  void (__thiscall *RemoveItem)(EquipmentBox *this);
  char (__thiscall *CanHoldWeapon)(EquipmentBox *this);
  char (__thiscall *CanHoldDrone)(EquipmentBox *this);
  char (__thiscall *CanHoldAugment)(EquipmentBox *this);
  void (__thiscall *CheckContents)(EquipmentBox *this);
  int (__thiscall *GetType)(EquipmentBox *this, bool unk);
  char (__thiscall *IsCargoBox)(EquipmentBox *this);
  char (__thiscall *CanHoldCrew)(EquipmentBox *this);
  char (__thiscall *CanDoJob)(EquipmentBox *this);
};

/* 672 */
struct VTable_SystemBox
{
  void (__thiscall *Free)(SystemBox *this);
  void (__thiscall *destroy)(SystemBox *this);
  bool (__thiscall *HasButton)(SystemBox *this);
  int (__thiscall *GetCooldownBarHeight)(SystemBox *this);
  int (__thiscall *GetHeightModifier)(SystemBox *this);
  void (__thiscall *OnLoop)(SystemBox *this);
  void (__thiscall *OnRender)(SystemBox *this, bool unk);
  bool (__thiscall *GetMouseHover)(SystemBox *this);
  bool (__thiscall *MouseMove)(SystemBox *this, int x, int y);
  int (__thiscall *MouseClick)(SystemBox *this, bool unk);
  int (__thiscall *MouseRightClick)(SystemBox *this, bool unk);
  void (__thiscall *OnTouch)(SystemBox *this);
  void (__thiscall *CancelTouch)(SystemBox *this);
  void (__thiscall *CloseTapBox)(SystemBox *this);
  void (__thiscall *IsTouchTooltipOpen)(SystemBox *this);
  void (__thiscall *IsTouchTooltipActive)(SystemBox *this);
  void (__thiscall *CloseTouchTooltip)(SystemBox *this, bool unk);
  void (__thiscall *KeyDown)(SystemBox *this, int key, bool unk);
};

/* 418 */
struct CAchievement
{
  std__string name_id;
  std__pair_9int___int progress;
  bool unlocked;
  int8_t gap_ex_custom;
  TextString name;
  TextString description;
  TextString header;
  bool newAchievement;
  bool multiDifficulty;
  int difficulty;
  std__string ship;
  int shipDifficulties[3];
  int dimension;
  CachedImage icon;
  CachedImage miniIcon;
  CachedImage miniIconLocked;
  CachedImage lockImage;
  CachedImage dotOn;
  CachedImage dotOff;
  GL_Primitive *outline;
  GL_Primitive *mini_outline;
  GL_Primitive *lockOverlay;
};

/* 639 */
struct WeaponBlueprint__MiniProjectile
{
  std__string image;
  bool fake;
};

/* 677 */
struct VTable_CrewMember
{
  void (__thiscall *Free)(CrewMember *this);
  Point (__thiscall *GetPosition)(CrewMember *this);
  float (__thiscall *PositionShift)(CrewMember *this);
  bool (__thiscall *InsideRoom)(CrewMember *this, int roomId);
  bool (__thiscall *ApplyDamage)(CrewMember *this, float damage);
  int (__thiscall *GetPriority)(CrewMember *this);
  bool (__thiscall *ValidTarget)(CrewMember *this, int unk);
  bool (__thiscall *MultiShots)(CrewMember *this);
  bool (__thiscall *ExactTarget)(CrewMember *this);
  bool (__thiscall *IsCrew)(CrewMember *this);
  bool (__thiscall *IsCloned)(CrewMember *this);
  bool (__thiscall *IsDrone)(CrewMember *this);
  void (__thiscall *Jump)(CrewMember *this);
  bool (__thiscall *GetIntruder)(CrewMember *this);
  void (__thiscall *SaveState)(CrewMember *this, int fileHelper);
  void (__thiscall *LoadState)(CrewMember *this, int fileHelper);
  void (__thiscall *OnLoop)(CrewMember *this);
  void (__thiscall *OnRender)(CrewMember *this, bool unk);
  bool (__thiscall *OutOfGame)(CrewMember *this);
  void (__thiscall *SetOutOfGame)(CrewMember *this);
  bool (__thiscall *Functional)(CrewMember *this);
  bool (__thiscall *CountForVictory)(CrewMember *this);
  bool (__thiscall *GetControllable)(CrewMember *this);
  bool (__thiscall *ReadyToFight)(CrewMember *this);
  bool (__thiscall *CanFight)(CrewMember *this);
  bool (__thiscall *CanRepair)(CrewMember *this);
  bool (__thiscall *CanSabotage)(CrewMember *this);
  bool (__thiscall *CanMan)(CrewMember *this);
  bool (__thiscall *CanTeleport)(CrewMember *this);
  bool (__thiscall *CanHeal)(CrewMember *this);
  bool (__thiscall *CanSuffocate)(CrewMember *this);
  bool (__thiscall *CanBurn)(CrewMember *this);
  int (__thiscall *GetMaxHealth)(CrewMember *this);
  bool (__thiscall *IsDead)(CrewMember *this);
  bool (__thiscall *PermanentDeath)(CrewMember *this);
  bool (__thiscall *ShipDamage)(CrewMember *this, float damage);
  bool (__thiscall *FireFightingSoundEffect)(CrewMember *this);
  std__string (__thiscall *GetUniqueRepairing)(CrewMember *this);
  bool (__thiscall *ProvidesVision)(CrewMember *this);
  float (__thiscall *GetMoveSpeedMultiplier)(CrewMember *this);
  float (__thiscall *GetRepairSpeed)(CrewMember *this);
  float (__thiscall *GetDamageMultiplier)(CrewMember *this);
  bool (__thiscall *ProvidesPower)(CrewMember *this);
  std__string (__thiscall *GetSpecies)(CrewMember *this);
  float (__thiscall *GetFireRepairMultiplier)(CrewMember *this);
  bool (__thiscall *IsTelepathic)(CrewMember *this);
  std__pair_13float___float (__thiscall *GetPowerCooldown)(CrewMember *this);
  bool (__thiscall *PowerReady)(CrewMember *this);
  void (__thiscall *ActivatePower)(CrewMember *this);
  bool (__thiscall *HasSpecialPower)(CrewMember *this);
  void (__thiscall *ResetPower)(CrewMember *this);
  float (__thiscall *GetSuffocationMultiplier)(CrewMember *this);
  int (__thiscall *BlockRoom)(CrewMember *this);
  Damage (__stdcall *GetRoomDamage)(CrewMember *this);
  bool (__thiscall *IsAnaerobic)(CrewMember *this);
  void (__thiscall *UpdateRepair)(CrewMember *this);
  bool (__thiscall *CanStim)(CrewMember *this);
};

/* 673 */
struct std__vector_22std__vector_9Animation
{
  std__vector_9Animation *_start;
  std__vector_9Animation *_finish;
  std__vector_9Animation *_end;
};

/* 675 */
struct std__vector_12GL_TextureZ1
{
  GL_Texture **_start;
  GL_Texture **_finish;
  GL_Texture **_end;
};

/* 674 */
struct std__vector_9CrewLaser
{
  CrewLaser *_start;
  CrewLaser *_finish;
  CrewLaser *_end;
};

/* 185 */
struct CrewAnimation
{
  VTable_CrewAnimation *_vtable;
  int iShipId;
  std__vector_22std__vector_9Animation anims;
  GL_Texture *baseStrip;
  GL_Texture *colorStrip;
  std__vector_12GL_TextureZ1 layerStrips;
  Pointf lastPosition;
  int direction;
  int sub_direction;
  int status;
  int moveDirection;
  ParticleEmitter smokeEmitter;
  bool bSharedSpot;
  uint8_t gap_ex_1[2];
  std__vector_9CrewLaser shots;
  TimerHelper shootTimer;
  TimerHelper punchTimer;
  Pointf target;
  float fDamageDone;
  bool bPlayer;
  bool bFrozen;
  bool bDrone;
  bool bGhost;
  bool bExactShooting;
  Animation projectile;
  bool bTyping;
  std__string race;
  int currentShip;
  bool bMale;
  bool colorblind;
  uint8_t gap_ex_2[2];
  std__vector_8GL_Color layerColors;
  int forcedAnimation;
  int forcedDirection;
  GL_Color projectileColor;
  bool bStunned;
  bool bDoorTarget;
  bool uniqueBool1;
  bool uniqueBool2;
};

/* 524 */
struct std__vector_16AnimationTracker
{
  AnimationTracker *_start;
  AnimationTracker *_finish;
  AnimationTracker *_end;
};

/* 619 */
struct VTable_CompleteShip
{
  void (__thiscall *Free)(CompleteShip *);
  void (__thiscall *OnLoop)(CompleteShip *);
  void (__thiscall *PauseLoop)(CompleteShip *);
  bool (__thiscall *IsBoss)(CompleteShip *);
  void (__thiscall *Restart)(CompleteShip *);
  bool (__thiscall *IncomingFire)(CompleteShip *);
};

/* 221 */
struct StoreBox
{
  VTable_StoreBox *_vtable;
  int itemId;
  int itemBox;
  std__string buttonImage;
  Button button;
  GL_Primitive *symbol;
  Description desc;
  int count;
  int cost_position;
  ShipManager *shopper;
  Equipment *equipScreen;
  Blueprint *pBlueprint;
  bool bEquipmentBox;
  float fIconScale;
  Point pushIcon;
};

/* 622 */
struct std__pair_26std__string___RandomAmount
{
  std__string _first;
  RandomAmount _second;
};

/* 678 */
struct VTable_ShipSystem
{
  void (__thiscall *Free)(ShipSystem *this);
  void (__thiscall *SetSelected)(ShipSystem *this, int selectedState);
  int (__thiscall *GetSelected)(ShipSystem *this);
  bool (__thiscall *CompletelyDestroyed)(ShipSystem *this);
  std__string *(__thiscall *GetName)(ShipSystem *this);
  void (__thiscall *SetName)(ShipSystem *this, std__string *name);
  void (__thiscall *Repair)(ShipSystem *this);
  bool (__thiscall *PartialRepair)(ShipSystem *this, float amount, bool unk);
  bool (__thiscall *PartialDamage)(ShipSystem *this, float damage);
  bool (__thiscall *NeedsRepairing)(ShipSystem *this);
  bool (__thiscall *Functioning)(ShipSystem *this);
  bool (__thiscall *CanBeSabotaged)(ShipSystem *this);
  float (__thiscall *GetDamage)(ShipSystem *this);
  void *(__thiscall *GetLocation)(ShipSystem *this);
  void *(__thiscall *GetGridLocation)(ShipSystem *this);
  void (__thiscall *SetDamage)(ShipSystem *this, float damage);
  void (__thiscall *SetMaxDamage)(ShipSystem *this, float maxDamage);
  void (__thiscall *SetLocation)(ShipSystem *this, Point pos);
  void (__thiscall *OnRenderHighlight)(ShipSystem *this);
  int (__thiscall *GetId)(ShipSystem *this);
  bool (__thiscall *IsRoomBased)(ShipSystem *this);
  int (__thiscall *GetRoomId)(ShipSystem *this);
  bool (__thiscall *Ioned)(ShipSystem *this);
  void (__thiscall *SetRoomId)(ShipSystem *this);
  void (__thiscall *SetHackingLevel)(ShipSystem *this, int level);
  void (__thiscall *ForceBatteryPower)(ShipSystem *this, int power);
  void (__thiscall *RemoveBatteryPower)(ShipSystem *this);
  WeaponBlueprint *(__thiscall *GetWeaponInfo)(ShipSystem *this);
  std__string *(__thiscall *GetOverrideTooltip)(ShipSystem *this);
  void (__thiscall *CheckMaxPower)(ShipSystem *this);
  void (__thiscall *SetBonusPower)(ShipSystem *this, int unk1, int unk2);
  void (__thiscall *AddDamage)(ShipSystem *this, int damage);
  bool (__thiscall *ForceDecreasePower)(ShipSystem *this, int power);
  bool (__thiscall *ForceIncreasePower)(ShipSystem *this, int power);
  void (__thiscall *StopHacking)(ShipSystem *this);
  void (__thiscall *OnRender)(ShipSystem *this);
  void (__thiscall *OnRenderFloor)(ShipSystem *this);
  void (__thiscall *OnRenderEffects)(ShipSystem *this);
  void (__thiscall *OnLoop)(ShipSystem *this);
  bool (__thiscall *GetNeedsPower)(ShipSystem *this);
  void (__thiscall *Restart)(ShipSystem *this);
  bool (__thiscall *Clickable)(ShipSystem *this);
  bool (__thiscall *Powered)(ShipSystem *this);
  void (__thiscall *ShipDestroyed)(ShipSystem *this);
};

/* 816 */
struct Shields__ShieldAnimation
{
  Pointf location;
  float current_size;
  float end_size;
  float current_thickness;
  float end_thickness;
  float length;
  float dx;
  int side;
  int ownerId;
  int damage;
};

/* 304 */
struct Spreadable
{
  Repairable _base;
  std__string soundName;
};

/* 192 */
struct Fire
{
  Spreadable _base;
  float fDeathTimer;
  float fStartTimer;
  float fOxygen;
  Animation fireAnimation;
  Animation smokeAnimation;
  bool bWasOnFire;
};

/* 693 */
struct VTable_CrewAnimation
{
  void (__thiscall *Free)(CrewAnimation *this);
  void (__thiscall *OnRender)(CrewAnimation *this, float unk1, int unk2, bool unk3);
  void (__thiscall *OnRenderProps)(CrewAnimation *this);
  void (__thiscall *OnUpdateEffects)(CrewAnimation *this);
  void (__thiscall *UpdateFiring)(CrewAnimation *this);
  void (__thiscall *UpdateShooting)(CrewAnimation *this);
  bool (__thiscall *FireShot)(CrewAnimation *this);
  int (__thiscall *GetFiringFrame)(CrewAnimation *this);
  std__string (__stdcall *GetShootingSound)(CrewAnimation *this);
  std__string (__stdcall *GetDeathSound)(CrewAnimation *this);
  void (__thiscall *Restart)(CrewAnimation *this);
  bool (__thiscall *CustomDeath)(CrewAnimation *this);
};

/* 172 */
struct CrewLaser
{
  Projectile _base;
  int r;
  int g;
  int b;
};

/* 797 */
struct VTable_StoreBox
{
  void (__thiscall *Free)(StoreBox *);
  void (__thiscall *OnLoop)(StoreBox *);
  void (__thiscall *OnRender)(StoreBox *);
  void (__thiscall *MouseMove)(StoreBox *, int, int);
  void (__thiscall *MouseClick)(StoreBox *, int, int);
  void (__thiscall *OnTouch)(StoreBox *);
  void (__thiscall *Activate)(StoreBox *);
  void (__thiscall *Purchase)(StoreBox *);
  int (__thiscall *SetInfoBox)(StoreBox *, InfoBox *, int);
  bool (__thiscall *CanHold)(StoreBox *);
  bool (__thiscall *RequiresConfirm)(StoreBox *);
  void (__thiscall *Confirm)(StoreBox *, bool);
  TextString (__thiscall *GetConfirmText)(StoreBox *);
  int (__thiscall *GetExtraData)(StoreBox *);
  void (__thiscall *SetExtraData)(StoreBox *, int);
};

/* 156 */
struct TutorialManager;

/* 159 */
struct ShipRepairDrone;

/* 161 */
struct CombatDrone
{
  SpaceDrone _base;
  Pointf lastDestination;
  float progressToDestination;
  float heading;
  float oldHeading;
  CachedImage drone_image_off;
  CachedImage drone_image_charging;
  CachedImage drone_image_on;
  CachedImage engine_image;
};

/* 162 */
struct BoarderPodDrone
{
  SpaceDrone _base;
  GL_Texture *baseSheet;
  GL_Texture *colorSheet;
  Pointf startingPosition;
  Animation droneImage;
  CachedImage flame;
  BoarderDrone *boarderDrone;
  bool bDeliveredDrone;
  bool diedInSpace;
};

/* 167 */
struct CrewDrone
{
  CrewMember _base;
  Drone _drone;
  int droneRoom;
  Animation powerUp;
  Animation powerDown;
  GL_Texture *lightLayer;
  GL_Texture *baseLayer;
};

/* 318 */
struct BoarderDrone
{
  CrewDrone _base;
};

/* 163 */
struct SuperShieldDrone
{
  DefenseDrone _base;
  Shields *shieldSystem;
  CachedImage drone_image_on;
  CachedImage drone_image_off;
  CachedImage drone_image_glow;
  float glowAnimation;
};

/* 164 */
struct DefenseDrone
{
  SpaceDrone _base;
  int currentTargetId;
  int shotAtTargetId;
  float currentSpeed;
  CachedImage drone_image;
  CachedImage gun_image_off;
  CachedImage gun_image_charging;
  CachedImage gun_image_on;
  CachedImage engine_image;
  int currentTargetType;
};

/* 758 */
struct std__vector_28std__vector_14CAchievementZ1
{
  std__vector_14CAchievementZ1 *_start;
  std__vector_14CAchievementZ1 *_finish;
  std__vector_14CAchievementZ1 *_end;
};

/* 165 */
struct AchievementTracker
{
  std__vector_14CAchievementZ1 recentlyUnlocked;
  std__vector_28std__vector_14CAchievementZ1 shipUnlocks;
  std__vector_14CAchievementZ1 achievements;
  std__map_17std__string___int gameFlags;
  AnimationTracker achievementPopup;
  GL_Primitive *popupBox;
  GL_Primitive *achievementBox[2];
  GL_Primitive *achievementOverlay[2];
  std__string currentShip;
};

/* 166 */
struct IonDrone
{
  BoarderDrone _base;
  int lastRoom;
};

/* 653 */
struct StatTracker
{
  int max;
  int total;
  int current;
  std__string desc_id;
  int sector;
};

/* 654 */
struct CrewStatTracker
{
  int max;
  std__string name;
  std__string species;
  bool male;
  std__string title_id;
  bool newStat;
};

/* 656 */
struct TopScore
{
  std__string name;
  std__string blueprint;
  GL_Texture *image;
  int sector;
  int score;
  bool victory;
  int difficulty;
  bool advancedContent;
};

/* 655 */
struct std__vector_8TopScore
{
  TopScore *_start;
  TopScore *_finish;
  TopScore *_end;
};

/* 658 */
struct std__vector_35std__vector_21std__vector_8TopScore
{
  std__vector_21std__vector_8TopScore *_start;
  std__vector_21std__vector_8TopScore *_finish;
  std__vector_21std__vector_8TopScore *_end;
};

/* 661 */
struct std__vector_31std_pair_CAchievement_ptr_Point
{
  std__pair_22CAchievementZ1___Point *_start;
  std__pair_22CAchievementZ1___Point *_finish;
  std__pair_22CAchievementZ1___Point *_end;
};

/* 168 */
struct ScoreKeeper
{
  StatTracker stats[4];
  CrewStatTracker crewStats[5];
  int gamesPlayed;
  int victories;
  TopScore currentScore;
  std__vector_17std__vector_4bool unlocked;
  bool firstRun;
  std__vector_8TopScore topScores;
  std__vector_35std__vector_21std__vector_8TopScore shipScores;
  bool bSavedScore;
  int newestHighScore;
  int newestShipBest;
  int newestShipType;
  int newestShipLayout;
  std__vector_31std_pair_CAchievement_ptr_Point achievements;
  std__vector_31std_pair_CAchievement_ptr_Point shipAchievements;
  GL_Texture *rightBox[2];
  GL_Texture *leftBox[2];
  Button rightButtons[2];
  Button leftButtons[2];
  bool activatedRight;
  bool activatedLeft;
  GL_Texture *lockIcon;
  InfoBox infoBox;
  TextButton closeButton;
  TextButton typeA;
  TextButton typeB;
  TextButton typeC;
  Button leftButton;
  Button rightButton;
  TextButton listButton;
  std__vector_15GenericButtonZ1 buttons;
  int selectedShip;
  int selectedLayout;
  int selectedAch;
  int selectedShipAch;
  ShipSelect shipSelect;
  int activeTouch;
  bool forceUnlockAll;
  bool gotCloseEvent;
  int loadingGameVersion;
  Point shipListCenter;
  Point typeALoc;
  Point typeBLoc;
  Point typeCLoc;
};

/* 657 */
struct std__vector_21std__vector_8TopScore
{
  std__vector_8TopScore *_start;
  std__vector_8TopScore *_finish;
  std__vector_8TopScore *_end;
};

/* 660 */
struct std__pair_22CAchievementZ1___Point
{
  CAchievement *_first;
  Point _second;
};

/* 302 */
struct LaserBlast
{
  Projectile _base;
  Targetable *movingTarget;
  float spinAngle;
  float spinSpeed;
};

/* 170 */
struct PDSFire
{
  LaserBlast _base;
  Pointf startPoint;
  bool passedTarget;
  float currentScale;
  bool missed;
  Animation explosionAnimation;
};

/* 175 */
struct ShipGraph
{
  std__vector_6RoomZ1 rooms;
  std__vector_6DoorZ1 doors;
  std__vector_3int doorCounts;
  Point center;
  Pointf worldPosition;
  float worldHeading;
  Pointf lastWorldPosition;
  float lastWorldHeading;
  Globals__Rect shipBox;
  std__string shipName;
};

/* 176 */
struct CrewMemberFactory
{
  int playerCrew;
  int enemyCrew;
  int enemyCloneCount;
  std__vector_12CrewMemberZ1 crewMembers;
  std__vector_12CrewMemberZ1 lostMembers;
};

/* 177 */
struct ShipInfo
{
  std__map_17std__string___int augList;
  std__map_17std__string___int equipList;
  int augCount;
};

/* 182 */
struct Moddable;

/* 184 */
struct AnaerobicAlien;

/* 186 */
struct EnergyAlien
{
  VTable_CrewMember *_vtable;
  int iShipId;
  float x;
  float y;
  float size;
  float scale;
  float goal_x;
  float goal_y;
  int width;
  int height;
  std__pair_13float___float health;
  float speed_x;
  float speed_y;
  Path path;
  bool new_path;
  float x_destination;
  float y_destination;
  Door *last_door;
  Repairable *currentRepair;
  bool bSuffocating;
  int moveGoal;
  int selectionState;
  int iRoomId;
  int iManningId;
  int iRepairId;
  int iStackId;
  Slot currentSlot;
  bool intruder;
  bool bFighting;
  bool bSharedSpot;
  CrewAnimation *crewAnim;
  GL_Texture *selectionImage;
  CachedImage healthBox;
  CachedImage healthBoxRed;
  CachedRect healthBar;
  float fMedbay;
  float lastDamageTimer;
  float lastHealthChange;
  int currentShipId;
  AnimationTracker flashHealthTracker;
  Pointf currentTarget;
  CrewTarget *crewTarget;
  BoardingGoal boardingGoal;
  bool bFrozen;
  bool bFrozenLocation;
  CrewTask task;
  std__string type;
  Ship *ship;
  Slot finalGoal;
  Door *blockingDoor;
  bool bOutOfGame;
  std__string species;
  bool bDead;
  uint8_t gap_ex_1[2];
  int iOnFire;
  bool bActiveManning;
  ShipSystem *currentSystem;
  int usingSkill;
  CrewBlueprint blueprint;
  Animation healing;
  Animation stunned;
  AnimationTracker levelUp;
  int lastLevelUp;
  SCrewStats stats;
  std__vector_17std__vector_4bool skillsEarned;
  bool clone_ready;
  bool bMindControlled;
  int iDeathNumber;
  Animation mindControlled;
  Animation stunIcon;
  std__vector_30std__vector_16AnimationTracker skillUp;
  int healthBoost;
  float fMindDamageBoost;
  float fCloneDying;
  bool bResisted;
  uint8_t gap_ex_2[2];
  Slot savedPosition;
  float fStunTime;
  CachedImage movementTarget;
  bool bCloned;
  bool bTriggerExplosion;
  bool bExploded;
};

/* 188 */
struct Algae;

/* 194 */
struct DebugHelper;

/* 203 */
struct CooldownSystemBox
{
  SystemBox _base;
  GL_Primitive *box[5];
  GL_Texture *bar[5];
  Point boxPosition;
  bool roundDown;
  GL_Primitive *barPrimitive;
  int lastBarHeight;
  int lastBarTop;
};

/* 195 */
struct CloneBox
{
  CooldownSystemBox _base;
  CloneSystem *cloneSys;
  GL_Texture *pipe[3];
  GL_Texture *boxBottom;
  GL_Texture *boxMiddle;
  GL_Texture *boxTop;
  GL_Texture *boxSolo;
  GL_Texture *boxFill;
  WarningMessage *dyingCrewWarning;
};

/* 196 */
struct BatteryBox
{
  CooldownSystemBox _base;
  BatterySystem *batterySystem;
  Button batteryButton;
  Point buttonOffset;
};

/* 197 */
struct MindBox
{
  CooldownSystemBox _base;
  MindSystem *mindSystem;
  Button mindControl;
  Point buttonOffset;
  WarningMessage *superShieldWarning;
};

/* 204 */
struct ArtilleryBox
{
  CooldownSystemBox _base;
  ArtillerySystem *artSystem;
  Point buttonOffset;
};

/* 206 */
struct WeaponSystemBox
{
  SystemBox _base;
  WeaponControl *weapControl;
  TextButton autofireButton;
  Point buttonOffset;
  TouchTooltip *autofireTouchTooltip;
  bool touchTipWasOpen;
  bool autofireTipWasOpen;
};

/* 207 */
struct MouseControl
{
  Point position;
  Point lastPosition;
  int aiming_required;
  int iTeleporting;
  int iMindControlling;
  bool bSellingStuff;
  bool valid;
  bool newHover;
  bool lastValid;
  int animateDoor;
  GL_Texture *validPointer;
  GL_Texture *invalidPointer;
  GL_Texture *selling;
  Animation openDoor;
  int tooltipFont;
  std__string tooltip;
  float tooltipTimer;
  bool bMoving;
  bool bHideMouse;
  GL_Texture *lastIcon;
  GL_Texture *lastAddition;
  bool bForceTooltip;
  std__string tooltipTitle;
  std__string lastTooltipText;
  int iHacking;
  int overrideTooltipWidth;
  Point staticTooltip;
};

/* 617 */
struct std__vector_11CachedImage
{
  CachedImage *_start;
  CachedImage *_finish;
  CachedImage *_end;
};

/* 214 */
struct WeaponBox
{
  ArmamentBox _base;
  ProjectileFactory *pWeapon;
  bool armed;
  bool armedForAutofire;
  float cooldownMax;
  float cooldownModifier;
  Point cooldownPoint;
  int cooldownWidth;
  int cooldownHeight;
  std__vector_14GL_PrimitiveZ1 cooldownBox;
  GL_Primitive *cooldownBar;
  std__vector_11CachedImage chargeIcons;
  bool defaultAutofire;
  bool wasCharged;
};

/* 219 */
struct SystemStoreBox
{
  StoreBox _base;
  SystemBlueprint *blueprint;
  int type;
  bool bConfirming;
  std__string confirmString;
  std__string freeBlueprint;
  int droneChoice;
};

/* 220 */
struct CrewStoreBox
{
  StoreBox _base;
  std__string name;
  Animation crewPortrait;
  CrewBlueprint blueprint;
};

/* 229 */
struct DroneEquipBox
{
  EquipmentBox _base;
};

/* 230 */
struct WeaponEquipBox
{
  EquipmentBox _base;
};

/* 237 */
struct ShipRepair;

/* 240 */
struct DroneBox;

/* 254 */
struct freetype;

/* 255 */
struct Settings;

/* 260 */
struct FileHelper;

/* 261 */
struct CSurface;

/* 262 */
struct CFPS
{
  float RunningTime;
  char _unk[4];
  double OldTime;
  double LastTime;
  float SpeedFactor;
  int NumFrames;
  int Frames;
  int speedLevel;
};

/* 263 */
struct EventSystem;

/* 271 */
struct SoundControl;

/* 273 */

struct std__unordered_map_31std__string___SectorDescription
{
    char unk[0x1C];
};

struct std__unordered_map_39std__string___std__vector_11std__string
{
    char unk[0x1C];
};

struct EventText
{
	TextString text;
	std__string planet;
	std__string back;
};

struct std__vector_9EventText
{
    EventText* _start;
    EventText* _finish;
    EventText* _end;
};

struct std__unordered_map_36std__string___std__vector_9EventText
{
    char unk[0x1C];
};

struct std__vector_15LocationEventZ1
{
    LocationEvent** _start;
    LocationEvent** _finish;
    LocationEvent** _end;
};

struct std__unordered_map_26std_string___ResourceEvent
{
    char unk[0x1C];
};

struct std__unordered_map_17std__string___int
{
    char unk[0x1C];
};


struct EventGenerator
{
	std__vector_11std__string baseEvents;
	std__unordered_map_31std__string___SectorDescription sectors;
	std__unordered_map_39std__string___std__vector_11std__string baseSectors;
	std__unordered_map_39std__string___std__vector_11std__string eventLists;
	std__unordered_map_29std__string___EventTemplateZ1 events;
	std__unordered_map_29std__string___EventTemplateZ1 usedEvents;
	std__unordered_map_36std__string___std__vector_9EventText textLists;
	std__unordered_map_36std__string___std__vector_9EventText usedTextLists;
	std__unordered_map_39std__string___std__vector_11std__string shipTemplateLists;
	std__unordered_map_23std__string___ShipEvent shipTemplates;
	std__unordered_map_39std__string___std__vector_11std__string imageLists;
	std__vector_15LocationEventZ1 trashList;
	std__unordered_map_27std__string___ResourceEvent resourcesCollected;
	std__unordered_map_17std__string___int eventTypesCreated;
	int shipsCreated;
	bool shiplessEvent;
	bool creatingShipEvent;
	int forceRandomIndex;
};


/* 629 */
struct std__unordered_map_29std__string___EventTemplateZ1
{
  char unk[28];
};

/* 630 */
struct std__vector_15EventTemplateZ1
{
  EventTemplate **_start;
  EventTemplate **_finish;
  EventTemplate **_end;
};

/* 631 */
struct std__unordered_map_23std__string___ShipEvent
{
  char unk[28];
};

/* 275 */
struct EventsParser
{
  std__unordered_map_29std__string___EventTemplateZ1 eventTemplates;
  std__vector_15EventTemplateZ1 trashList;
  std__unordered_map_23std__string___ShipEvent shipTemplates;
};

/* 731 */
struct std__map_27std__string___ShipBlueprint
{
  char unk[24];
};

/* 732 */
struct std__map_29std__string___WeaponBlueprint
{
  char unk[24];
};

/* 733 */
struct std__map_28std__string___DroneBlueprint
{
  char unk[24];
};

/* 734 */
struct std__map_30std__string___AugmentBlueprint
{
  char unk[24];
};

/* 740 */
struct std__map_27std__string___CrewBlueprint
{
  char unk[24];
};

/* 735 */
struct std__map_18std__string___bool
{
  char unk[24];
};

/* 662 */
struct std__map_25std__string___std__string
{
  char unk[24];
};

/* 742 */
struct std__map_37std__string___std_map_std_string_bool
{
  char unk[24];
};

/* 737 */
struct std__map_27std__string___ItemBlueprint
{
  char unk[24];
};

/* 738 */
struct std__map_29std__string___SystemBlueprint
{
  char unk[24];
};

/* 739 */
struct std__map_39std__string___std__vector_11std__string
{
  char unk[24];
};

/* 278 */
struct BlueprintManager
{
  int rarityTotal;
  std__map_27std__string___ShipBlueprint shipBlueprints;
  std__map_29std__string___WeaponBlueprint weaponBlueprints;
  std__map_28std__string___DroneBlueprint droneBlueprints;
  std__map_30std__string___AugmentBlueprint augmentBlueprints;
  std__map_27std__string___CrewBlueprint crewBlueprints;
  std__map_18std__string___bool nameList;
  std__map_25std__string___std__string shortNames;
  std__map_37std__string___std_map_std_string_bool languageNameLists;
  std__map_27std__string___ItemBlueprint itemBlueprints;
  std__map_29std__string___SystemBlueprint systemBlueprints;
  std__map_39std__string___std__vector_11std__string blueprintLists;
  std__vector_11std__string currentNames;
};

/* 297 */
struct PowerManager
{
  std__pair_9int___int currentPower;
  int over_powered;
  float fFuel;
  bool failedPowerup;
  int iTempPowerCap;
  int iTempPowerLoss;
  int iTempDividePower;
  int iHacked;
  std__pair_9int___int batteryPower;
};

/* 857 */
struct CollisionResponse
{
  int collision_type;
  Pointf point;
  int damage;
  int superDamage;
};

/* 299 */
struct BeamWeapon
{
  Projectile _base;
  Pointf sub_end;
  Pointf sub_start;
  Pointf shield_end;
  Pointf final_end;
  Pointf target2;
  Pointf target1;
  float lifespan;
  float length;
  float dh;
  CollisionResponse last_collision;
  int soundChannel;
  std__vector_9Animation contactAnimations;
  float animationTimer;
  int lastDamage;
  Targetable *movingTarget;
  float start_heading;
  float timer;
  WeaponAnimation *weapAnimation;
  bool piercedShield;
  bool oneSpace;
  bool bDamageSuperShield;
  int movingTargetId;
  bool checkedCollision;
  std__vector_9Animation smokeAnims;
  Pointf lastSmokeAnim;
};

/* 311 */
struct BattleDrone
{
  CrewDrone _base;
};

/* 312 */
struct CloakingBox
{
  CooldownSystemBox _base;
  std__vector_8ButtonZ1 buttons;
  Button *currentButton;
  CloakingSystem *cloakSystem;
  Point buttonOffset;
};

/* 315 */
struct MantisAlien;

/* 316 */
struct RepairDrone
{
  CrewDrone _base;
};

/* 317 */
struct TeleportBox
{
  SystemBox _base;
  GL_Texture *box;
  Button teleportLeave;
  Button teleportArrive;
  TeleportSystem *teleSystem;
  Point buttonOffset;
  WarningMessage superShieldWarning;
};

/* 319 */
struct CrystalAlien
{
  CrewMember _base;
  std__pair_13float___float powerCooldown;
};

/* 320 */
struct ItemBlueprint
{
  Blueprint _base;
};

/* 322 */
struct RockAnimation
{
  CrewAnimation _base;
};

/* 323 */
struct BombProjectile
{
  Projectile _base;
  bool bMissed;
  DamageMessage *missMessage;
  float explosiveDelay;
  bool bSuperShield;
  bool superShieldBypass;
};

/* 326 */
struct EnergyAnimation;

/* 327 */
struct MantisAnimation
{
  CrewAnimation _base;
};

/* 328 */
struct RepairAnimation
{
	CrewAnimation _base;
};

/* 331 */
struct IonDroneAnimation
{
  CrewAnimation _base;
  Animation ionExplosion;
  Animation ionAnimation;
  Animation doorAnimations[4];
  Animation ionGlow;
  float ionEffect;
  bool damagedDoor;
};

/* 334 */
struct Ghost;

/* 335 */
struct DoorBox
{
  SystemBox _base;
  GL_Texture *box;
  Button openDoors;
  Button closeDoors;
  ShipManager *ship;
  Point buttonOffset;
};

/* 336 */
struct HackBox
{
  CooldownSystemBox _base;
  HackingSystem *hackSys;
  std__vector_8ButtonZ1 buttons;
  Button *currentButton;
  Point buttonOffset;
  GL_Texture *box;
  GL_Texture *box2;
  Button hackButton;
  Button overlayButton;
  ShipManager *shipManager;
  AnimationTracker flashTracker;
  WarningMessage *superShieldWarning;
};

/* 337 */
struct Missile
{
  Projectile _base;
};

/* 338 */
struct Asteroid
{
  Projectile _base;
  GL_Texture *imageId;
  float angle;
};

/* 340 */
struct EngiAlien;

/* 341 */
struct RockAlien;

/* 342 */
struct SlugAlien;

/* 384 */
struct RepairStoreBox
{
  StoreBox _base;
  bool repairAll;
  int repairCost;
  TextString buttonText;
};

/* 766 */
struct std__array_28std__vector_10HotkeyDesc___4
{
  char unk[48];
};

/* 389 */
struct SettingValues
{
  int fullscreen;
  int currentFullscreen;
  int lastFullscreen;
  int sound;
  int music;
  int difficulty;
  bool commandConsole;
  bool altPause;
  bool touchAutoPause;
  bool lowend;
  bool fbError;
  std__string language;
  bool languageSet;
  Point screenResolution;
  int dialogKeys;
  bool logging;
  bool bShowChangelog;
  int loadingSaveVersion;
  bool achPopups;
  bool vsync;
  bool frameLimit;
  bool manualResolution;
  bool manualWindowed;
  bool manualStretched;
  bool showPaths;
  bool swapTextureType;
  bool colorblind;
  std__array_28std__vector_10HotkeyDesc___4 hotkeys;
  bool holdingModifier;
  bool bDlcEnabled;
  int openedList;
  bool beamTutorial;
};

/* 663 */
struct std__map_43std__string___std_map_std_string_std_string
{
  char unk[24];
};

/* 392 */
struct TextLibrary
{
  std__map_25std__string___std__string dictionary;
  std__map_43std__string___std_map_std_string_std_string languageDictionaries;
  std__string currentLanguage;
};

/* 400 */
struct DroneStoreBox
{
  StoreBox _base;
  DroneBlueprint *blueprint;
};

/* 401 */
struct WeaponStoreBox
{
  StoreBox _base;
  WeaponBlueprint *blueprint;
};

/* 404 */
struct ToggleButton;

/* 406 */
struct freetype__font_data
{
  float h;
  int font;
  float fontsize;
  float baseline;
  float lineHeight;
};

/* 408 */
struct ItemStoreBox
{
  StoreBox _base;
  ItemBlueprint *blueprint;
};

/* 410 */
struct EngiAnimation;

/* 412 */
struct SlugAnimation;

/* 414 */
struct AugmentStoreBox
{
  StoreBox _base;
  AugmentBlueprint *blueprint;
};

/* 415 */
struct CrystalAnimation;

/* 417 */
struct AnaerobicAnimation;

/* 421 */
struct ShipGenerator;

/* 449 */
struct std__vector_4Room
{
  Room *_start;
  Room *_finish;
  Room *_end;
};

/* 450 */
struct std__vector_4Door
{
  Door *_start;
  Door *_finish;
  Door *_end;
};

/* 451 */
struct std__vector_9OuterHull
{
  OuterHull *_start;
  OuterHull *_finish;
  OuterHull *_end;
};

/* 455 */
struct std__vector_10ShipSystem
{
  ShipSystem *_start;
  ShipSystem *_finish;
  ShipSystem *_end;
};

/* 463 */
struct std__vector_10CrewMember
{
  CrewMember *_start;
  CrewMember *_finish;
  CrewMember *_end;
};

/* 471 */
struct std__vector_6voidZ1
{
  void **_start;
  void **_finish;
  void **_end;
};

/* 496 */
struct std__vector_15ArtillerySystem
{
  ArtillerySystem *_start;
  ArtillerySystem *_finish;
  ArtillerySystem *_end;
};

/* 497 */
struct ShipBlueprint__SystemTemplate
{
  int systemId;
  int powerLevel;
  std__vector_3int location;
  int bp;
  int maxPower;
  std__string image;
  int slot;
  int direction;
  std__vector_11std__string weapon;
};

/* 539 */
struct ResourceControl__LogicalTexInfo
{
  std__string physName;
  int x;
  int y;
  int w;
  int h;
};

/* 597 */
struct std__pair_17LocationZ1___bool
{
  Location *_first;
  bool _second;
};

/* 608 */
struct std__vector_10TextButton
{
  TextButton *_start;
  TextButton *_finish;
  TextButton *_end;
};

/* 621 */
struct std__pair_25std_string___RandomAmount;

/* 679 */
struct GL_TexVertex
{
  float x;
  float y;
  float u;
  float v;
};

/* 703 */
struct std__map_28std__string___AnimationSheet
{
  char unk[24];
};

/* 705 */
struct std__map_29std__string___WeaponAnimation
{
  char unk[24];
};

/* 700 */
struct AnimationControl
{
  std__map_28std__string___AnimationSheet animSheets;
  std__map_23std__string___Animation animations;
  std__map_29std__string___WeaponAnimation weapAnimations;
};

/* 702 */
struct AnimationSheet
{
  int w;
  int h;
  int frameHeight;
  int frameWidth;
  GL_Texture *imageId;
};

/* 716 */
enum InputEventType
{
};

/* 717 */
enum InputEventDetail
{
};

/* 718 */
struct TouchInputEvent
{
  unsigned int id;
  float x;
  float y;
  float initial_x;
  float initial_y;
};

/* 719 */
struct TextInputEvent
{
  int32_t ch;
};

/* 720 */
struct MouseInputEvent
{
  float x;
  float y;
  float scroll;
};

/* 721 */
struct MemoryInputEvent
{
  int64_t used_bytes;
  int64_t free_bytes;
};

/* 722 */
struct KeyboardInputEvent
{
  int key;
  int system_key;
  unsigned int modifiers;
  char is_repeat;
};

/* 723 */
struct JoystickInputEvent
{
  int device;
  int index;
  float x;
  float y;
};

/* 725 */
struct InputEventUnion
{
  char eventData[20];
};

/* 726 */
struct InputEvent
{
  InputEventType type;
  InputEventDetail detail;
  double timestamp;
  InputEventUnion event;
};

/* 736 */
struct std__map_43std__string___std__map_18std__string___bool
{
  char unk[24];
};

/* 748 */
struct GL_Line
{
  Pointf start;
  Pointf end;
};

/* 763 */
struct HotkeyDesc
{
  std__string name;
  int key;
};

/* 764 */
struct std__array_14HotkeyDesc___4
{
  char unk[48];
};

/* 765 */
struct std__vector_27std__array_14HotkeyDesc___4
{
  std__array_14HotkeyDesc___4 *_start;
  std__array_14HotkeyDesc___4 *_finish;
  std__array_14HotkeyDesc___4 *_end;
};

/* 767 */
struct std__vector_10HotkeyDesc
{
  HotkeyDesc *_start;
  HotkeyDesc *_finish;
  HotkeyDesc *_end;
};

/* 825 */
struct GL_ColorTexVertex
{
  float x;
  float y;
  float u;
  float v;
  float r;
  float g;
  float b;
  float a;
};

/* 852 */
struct SystemControl__PowerBars
{
  GL_Primitive *normal[30];
  GL_Primitive *tiny[30];
  GL_Primitive *empty[30];
  GL_Primitive *damaged[30];
};

struct EventSystem
{
	std__vector_3int lastEvents;
	std__vector_3int newEvents;
};

struct VTable_CrewTarget
{
  void (__thiscall *Free)(CrewTarget *this);
  Point (__thiscall *GetPosition)(CrewTarget *this);
  float (__thiscall *PositionShift)(CrewTarget *this);
  bool (__thiscall *InsideRoom)(CrewTarget *this, int roomId);
  bool (__thiscall *ApplyDamage)(CrewTarget *this, float damage);
  int (__thiscall *GetPriority)(CrewTarget *this);
  bool (__thiscall *ValidTarget)(CrewTarget *this, int unk);
  bool (__thiscall *MultiShots)(CrewTarget *this);
  bool (__thiscall *ExactTarget)(CrewTarget *this);
  bool (__thiscall *IsCrew)(CrewTarget *this);
  bool (__thiscall *IsCloned)(CrewTarget *this);
  bool (__thiscall *IsDrone)(CrewTarget *this);
};
