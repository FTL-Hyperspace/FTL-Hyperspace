//=================================================================================================================
// This block will be copied to the beginning of the generated header file
// Any important includes or typedefs should go here

struct GlobalPre
{{
	#include <windows.h>
	#include "zhl.h"
	#include "rapidxml.hpp"
	#include <string>
	#include <vector>
	#include <set>
	#include <map>
	#include <functional>
	#include <deque>
	#include <stdarg.h>
	#include <unordered_map>
	#include <math.h>
	#include <queue>
	#undef LoadImage

	#ifndef M_PI
		#define M_PI 3.14159265358979323846
	#endif
	
	struct CAchievement;
	struct RandomAmount;
	struct Point;
	
	typedef std::pair<int, int> std_pair_int_int;
	typedef std::pair<float, float> std_pair_float_float;
	typedef std::pair<std::string, int> std_pair_std_string_int;
	typedef std::pair<std::string, RandomAmount> std_pair_std_string_RandomAmount;
	typedef std::pair<std::string, std::string> std_pair_std_string_std_string;
	typedef std::pair<CAchievement*, Point> std_pair_CAchievement_ptr_Point;
	typedef std::map<std::string, std::string> std_map_std_string_std_string;
	typedef std::map<std::string, int> std_map_std_string_int;
	typedef std::map<std::string, bool> std_map_std_string_bool;

	
}};






//=================================================================================================================
// This block will be copied right afterwards, unless it "depends" on specific structures
// in which case these structures will be declared first
// This is useful if you have something like a 2D vector struct and want some predefined vectors for convenience purposes

// struct GlobalConst // comment this line out and uncomment the line below if this block requires specific structures (don't forget to replace the list of dependencies with your own)
struct GlobalConst depends(RandomAmount, CAchievement, Point)
{{	
	enum TouchAction
	{
	  TOUCH_DOWN = 0x1,
	  TOUCH_MOVE = 0x2,
	  TOUCH_UP = 0x3,
	  TOUCH_CANCEL = 0x4,
	};
	
	enum InputEventType
	{
	  INPUT_EVENT_JOYSTICK = 0x1,
	  INPUT_EVENT_KEYBOARD = 0x2,
	  INPUT_EVENT_MEMORY = 0x3,
	  INPUT_EVENT_MOUSE = 0x4,
	  INPUT_EVENT_TEXT = 0x5,
	  INPUT_EVENT_TOUCH = 0x6,
	};
	
	enum InputEventDetail
	{
	  INPUT_JOYSTICK_CONNECTED = 0x1,
	  INPUT_JOYSTICK_DISCONNECTED = 0x2,
	  INPUT_JOYSTICK_BUTTON_DOWN = 0x3,
	  INPUT_JOYSTICK_BUTTON_UP = 0x4,
	  INPUT_JOYSTICK_DPAD_CHANGE = 0x5,
	  INPUT_JOYSTICK_STICK_CHANGE = 0x6,
	  INPUT_KEYBOARD_KEY_DOWN = 0x7,
	  INPUT_KEYBOARD_KEY_UP = 0x8,
	  INPUT_KEYBOARD_SYSTEM_KEY_DOWN = 0x9,
	  INPUT_KEYBOARD_SYSTEM_KEY_UP = 0xA,
	  INPUT_MEMORY_LOW = 0xB,
	  INPUT_MOUSE_MOVE = 0xC,
	  INPUT_MOUSE_LMB_DOWN = 0xD,
	  INPUT_MOUSE_LMB_UP = 0xE,
	  INPUT_MOUSE_MMB_DOWN = 0xF,
	  INPUT_MOUSE_MMB_UP = 0x10,
	  INPUT_MOUSE_RMB_DOWN = 0x11,
	  INPUT_MOUSE_RMB_UP = 0x12,
	  INPUT_MOUSE_SCROLL_H = 0x13,
	  INPUT_MOUSE_SCROLL_V = 0x14,
	  INPUT_TEXT_INPUT = 0x15,
	  INPUT_TEXT_DONE = 0x16,
	  INPUT_TEXT_CANCELLED = 0x17,
	  INPUT_TEXT_CLEAR = 0x18,
	  INPUT_TEXT_BACKSPACE = 0x19,
	  INPUT_TEXT_DELETE = 0x1A,
	  INPUT_TEXT_CURSOR_LEFT = 0x1B,
	  INPUT_TEXT_CURSOR_RIGHT = 0x1C,
	  INPUT_TEXT_CURSOR_HOME = 0x1D,
	  INPUT_TEXT_CURSOR_END = 0x1E,
	  INPUT_TOUCH_DOWN = 0x1F,
	  INPUT_TOUCH_MOVE = 0x20,
	  INPUT_TOUCH_UP = 0x21,
	  INPUT_TOUCH_CANCEL = 0x22,
	};

	enum DeleteType
	{
	  BUFFER = 0x1,
	  FRAMEBUFFER = 0x2,
	  PROGRAM = 0x3,
	  PROGRAM_PIPELINE = 0x4,
	  RENDERBUFFER = 0x5,
	  SHADER = 0x6,
	  TEXTURE = 0x7,
	  VERTEX_ARRAY = 0x8,
	};

	enum FontAlignment
	{
	  FONT_ALIGN_LEFT = 0x0,
	  FONT_ALIGN_CENTER = 0x1,
	  FONT_ALIGN_RIGHT = 0x2,
	};
	
	enum FramebufferColorType
	{
	  FBCOLOR_RGB8 = 0x1,
	  FBCOLOR_RGBA8 = 0x2,
	};
	
	enum GL_StencilMode
	{
	  STENCIL_IGNORE = 0x0,
	  STENCIL_SET = 0x1,
	  STENCIL_USE = 0x2,
	};

	enum ResourceType
	{
	  RES_UNUSED = 0x0,
	  RES_UNKNOWN = 0x1,
	  RES_DATA = 0x2,
	  RES_TEXTURE = 0x3,
	  RES_FONT = 0x4,
	  RES_SOUND = 0x5,
	  RES_FILE = 0x6,
	};


	enum SDLKey
	{
	  SDLK_UNKNOWN = 0x0,
	  SDLK_0 = 0x30,
	  SDLK_1 = 0x31,
	  SDLK_2 = 0x32,
	  SDLK_3 = 0x33,
	  SDLK_4 = 0x34,
	  SDLK_5 = 0x35,
	  SDLK_6 = 0x36,
	  SDLK_7 = 0x37,
	  SDLK_8 = 0x38,
	  SDLK_9 = 0x39,
	  SDLK_AT = 0x40,
	  SDLK_AMPERSAND = 0x26,
	  SDLK_ASTERISK = 0x2A,
	  SDLK_BACKQUOTE = 0x60,
	  SDLK_BACKSLASH = 0x5C,
	  SDLK_BACKSPACE = 0x8,
	  SDLK_BREAK = 0x13E,
	  SDLK_CAPSLOCK = 0x12D,
	  SDLK_CARET = 0x5E,
	  SDLK_CLEAR = 0xC,
	  SDLK_COLON = 0x3A,
	  SDLK_COMMA = 0x2C,
	  SDLK_COMPOSE = 0x13A,
	  SDLK_DELETE = 0x7F,
	  SDLK_DOLLAR = 0x24,
	  SDLK_DOWN = 0x112,
	  SDLK_END = 0x117,
	  SDLK_EQUALS = 0x3D,
	  SDLK_ESCAPE = 0x1B,
	  SDLK_EURO = 0x141,
	  SDLK_EXCLAIM = 0x21,
	  SDLK_F1 = 0x11A,
	  SDLK_F10 = 0x123,
	  SDLK_F11 = 0x124,
	  SDLK_F12 = 0x125,
	  SDLK_F13 = 0x126,
	  SDLK_F14 = 0x127,
	  SDLK_F15 = 0x128,
	  SDLK_F2 = 0x11B,
	  SDLK_F3 = 0x11C,
	  SDLK_F4 = 0x11D,
	  SDLK_F5 = 0x11E,
	  SDLK_F6 = 0x11F,
	  SDLK_F7 = 0x120,
	  SDLK_F8 = 0x121,
	  SDLK_F9 = 0x122,
	  SDLK_GREATER = 0x3E,
	  SDLK_HASH = 0x24,
	  SDLK_HELP = 0x13B,
	  SDLK_HOME = 0x116,
	  SDLK_INSERT = 0x115,
	  SDLK_KP0 = 0x100,
	  SDLK_KP1 = 0x101,
	  SDLK_KP2 = 0x102,
	  SDLK_KP3 = 0x103,
	  SDLK_KP4 = 0x104,
	  SDLK_KP5 = 0x105,
	  SDLK_KP6 = 0x106,
	  SDLK_KP7 = 0x107,
	  SDLK_KP8 = 0x108,
	  SDLK_KP9 = 0x109,
	  SDLK_KP_PERIOD = 0x10A,
	  SDLK_KP_DIVIDE = 0x10B,
	  SDLK_KP_MULTIPLY = 0x10C,
	  SDLK_KP_MINUS = 0x10D,
	  SDLK_KP_PLUS = 0x10E,
	  SDLK_KP_ENTER = 0x10F,
	  SDLK_KP_EQUALS = 0x110,
	  SDLK_LALT = 0x134,
	  SDLK_LCTRL = 0x132,
	  SDLK_LEFT = 0x114,
	  SDLK_LEFTBRACKET = 0x5B,
	  SDLK_LEFTPAREN = 0x28,
	  SDLK_LESS = 0x3C,
	  SDLK_LMETA = 0x136,
	  SDLK_LSHIFT = 0x130,
	  SDLK_LSUPER = 0x137,
	  SDLK_MENU = 0x13F,
	  SDLK_MINUS = 0x2D,
	  SDLK_MODE = 0x139,
	  SDLK_NUMLOCK = 0x12C,
	  SDLK_PAGEDOWN = 0x119,
	  SDLK_PAGEUP = 0x118,
	  SDLK_PAUSE = 0x13,
	  SDLK_PERIOD = 0x2E,
	  SDLK_PLUS = 0x2B,
	  SDLK_POWER = 0x140,
	  SDLK_PRINTSCREEN = 0x13C,
	  SDLK_QUESTION = 0x3F,
	  SDLK_QUOTEDBL = 0x22,
	  SDLK_QUOTE = 0x27,
	  SDLK_RALT = 0x133,
	  SDLK_RCTRL = 0x131,
	  SDLK_RETURN = 0xD,
	  SDLK_RIGHT = 0x113,
	  SDLK_RIGHTBRACKET = 0x5D,
	  SDLK_RIGHTPAREN = 0x29,
	  SDLK_RMETA = 0x135,
	  SDLK_RSHIFT = 0x12F,
	  SDLK_RSUPER = 0x138,
	  SDLK_SCROLLOCK = 0x12E,
	  SDLK_SEMICOLON = 0x3B,
	  SDLK_SLASH = 0x2F,
	  SDLK_SPACE = 0x20,
	  SDLK_SYSREQ = 0x13D,
	  SDLK_TAB = 0x9,
	  SDLK_UNDERSCORE = 0x5F,
	  SDLK_UNDO = 0x142,
	  SDLK_UP = 0x111,
	  SDLK_a = 0x61,
	  SDLK_b = 0x62,
	  SDLK_c = 0x63,
	  SDLK_d = 0x64,
	  SDLK_e = 0x65,
	  SDLK_f = 0x66,
	  SDLK_g = 0x67,
	  SDLK_h = 0x68,
	  SDLK_i = 0x69,
	  SDLK_j = 0x6A,
	  SDLK_k = 0x6B,
	  SDLK_l = 0x6C,
	  SDLK_m = 0x6D,
	  SDLK_n = 0x6E,
	  SDLK_o = 0x6F,
	  SDLK_p = 0x70,
	  SDLK_q = 0x71,
	  SDLK_r = 0x72,
	  SDLK_s = 0x73,
	  SDLK_t = 0x74,
	  SDLK_u = 0x75,
	  SDLK_v = 0x76,
	  SDLK_w = 0x77,
	  SDLK_x = 0x78,
	  SDLK_y = 0x79,
	  SDLK_z = 0x7A,
	  SDLK_LAST = 0x143,
	};

	enum ShaderType
	{
	  SHADER_TYPE_VERTEX = 0x0,
	  SHADER_TYPE_FRAGMENT = 0x1,
	};

	enum GraphicsPrimitiveType
	{
	  GRAPHICS_PRIMITIVE_POINTS = 0x1,
	  GRAPHICS_PRIMITIVE_LINES = 0x2,
	  GRAPHICS_PRIMITIVE_LINE_STRIP = 0x3,
	  GRAPHICS_PRIMITIVE_TRIANGLES = 0x4,
	  GRAPHICS_PRIMITIVE_TRIANGLE_STRIP = 0x5,
	  GRAPHICS_PRIMITIVE_QUADS = 0x6,
	  GRAPHICS_PRIMITIVE_QUAD_STRIP = 0x7,
	};
	
	enum GraphicsTextureColorType
	{
	  GRAPHICS_TEXCOLOR_NONE = 0x0,
	  GRAPHICS_TEXCOLOR_RGBA = 0x1,
	  GRAPHICS_TEXCOLOR_A = 0x2,
	  GRAPHICS_TEXCOLOR_L = 0x3,
	};
	
	enum GraphicsComparisonType
	{
	  GRAPHICS_COMPARISON_FALSE = 0x0,
	  GRAPHICS_COMPARISON_TRUE = 0x1,
	  GRAPHICS_COMPARISON_EQUAL = 0x2,
	  GRAPHICS_COMPARISON_NOT_EQUAL = 0x3,
	  GRAPHICS_COMPARISON_LESS = 0x4,
	  GRAPHICS_COMPARISON_LESS_EQUAL = 0x5,
	  GRAPHICS_COMPARISON_GREATER_EQUAL = 0x6,
	  GRAPHICS_COMPARISON_GREATER = 0x7,
	};

	typedef char *ShaderSourceCallback(GraphicsPrimitiveType, int, int, GraphicsTextureColorType, int, int, int, int, int, GraphicsComparisonType);
	
	static DWORD GetBaseAddress()
	{
		return (DWORD)GetModuleHandle(NULL);
	}
}};



//=================================================================================================================
// This block will be copied to the end of the generated header file
// Inlined utility functions can go here (feel free to replace the current ones with your own)

struct GlobalPost
{{
}};

//=================================================================================================================
// Example hook definitions

/*
// The first line resets the position of the sigscanner and then seeks the first instance of the given pattern
// The sigscanner will assign the first match to PushRenderTarget(), then seek to the next "ret" instruction (which is usually present near the end of a function)
// Since the next function definition isn't preceded by a signature, the sigscanner will then automatically seek the next instance of the instructions "push ebp; mov ebp, esp"
// which are present at the beginning of most functions, then assign the resulting address to PopRenderTarget()

"558bec83ec18833d??????????530f92c0560fb6c868????????51e8????????33c083c4088d5df88945f88945fce8????????8d45f4e8":
void PushRenderTarget();
void PopRenderTarget();

// This will rewind the sigscanner to the beginning and then seek the first instance of this pattern, then assign the result to Random()

"a1????????3d????????0f8c????????3d????????75??b8????????e8????????33c9eb??":
unsigned int Random();

// If you don't want the sigscanner to rewind, and want to continue from its current position instead, add a '.' at the beginning of the pattern
// This is useful if you have several functions next to each other but one of them doesn't begin with the usual instructions "push ebp; mov ebp, esp"

".a1????????8b523c508bcfffd2eb??81c6????????56e8????????8b8558ffffff05":
float RandomFloat();

// When a function contains arguments, the ones which are passed via registers must be explicitly specified
// In the example below, "a" is passed via the ECX register, "c" is passed via the EDX register, while "b" is passed on the stack since
// no register is specified

"558bec518b00568bf133c9c746140f000000894e10894dfc880e3bc174??5383c0085083c8ff33db8bcee8":
int SomeFunction(int a<ecx>, int b, int c<edx>);

// Common calling conventions are easy to translate:
//	- __stdcall: All arguments are passed on the stack, no need to specify registers
//	- __thiscall: (Microsoft Only) First argument is passed via ECX, all other arguments are passed on the stack
//  - __thiscall: (GCC/Linux) All arguments are passed via the stack, first argument is always this. Just like cdecl except with a this parameter. Stack cleanup is the caller's responsibility.
//	- __fastcall: First argument is passed via ECX, second is passed via EDX, all other arguments are passed on the stack
//	- __cdecl: All arguments are passed on the stack, stack cleanup is the caller's responsibility (see below)

// If a function requires caller cleanup rather than callee cleanup (i.e. __cdecl), the "cleanup" keyword must be added to the declaration
// Also note that default parameters are supported (this has nothing to do with the cleanup keyword but hey, might as well demonstrate it now)

cleanup int SomeFunction2(int a, int b, int c = 4);

// You will most likely encounter functions will look like the example below, where a pointer to a struct is passed as the first argument (second if it's a member function)
// and the same pointer is then returned

Vector *GetRenderPosition(Vector *result<esi>, int a, int b);

// This often means that function did not actually take such an argument in the original source, but returned a new instance of that struct instead
// In this case, the above function can be declared as follows, which is internally the same thing while being a lot more practical to use in code:

Vector GetRenderPosition<esi>(int a, int b);

// Talking about practicality, remember that references and pointers are internally the same thing (also the const modifier is meaningless in reverse engineering)
// meaning that the two declarations below are internally the same function but one of them is much easier to use than the other

void Msg(std::string *txt);
void Msg(const std::string &txt);


// You can also scan for global variables, not just functions!
// In the example below, the pattern contains 7 addresses we're interested in, the position of those addresses is indicated by parentheses
// Only groups of 4 bytes (8 hex digits) can be matched
// The results will be assigned to the next variable declarations in the same order as the matches (first match -> g_ShaderColorOffset, second match -> g_ShaderPixelation and so on)
// Adding '!' at the beginning of the pattern will make the sigscanner stay in place after the pattern is matched instead of seeking for the next "ret" instruction
// This is highly recommended when scanning for variables

"!68????????e8????????83c40468????????68????????b9(????????)e8????????68????????e8????????83c40468????????68????????b9(????????)e8????????68????????e8????????83c40468????????68????????b9(????????)e8????????68????????e8????????83c40468????????68????????b9(????????)e8????????68????????e8????????83c40468????????68????????b9(????????)e8????????68????????e8????????83c40468????????68????????b9(????????)e8????????68????????e8????????83c40468????????68????????b9(????????)":
Shader *g_ShaderColorOffset;
Shader *g_ShaderPixelation;
Shader *g_ShaderBloom;
Shader *g_ShaderColorCorrection;
Shader *g_ShaderHQ4X;
Shader *g_ShaderShockwave;
Shader *g_ShaderOldTV;

// The above example created pointers to global variables
// If you want a reference to a global variable instead, maybe because it is an int or a float you'll use often, remove the asterisk and add the keyword "reference" to the beginning of the declaration
// Note that this doesn't actually declare a reference, but a pointer and a macro which gives the illusion of a reference (the end result is pretty much the same though)
// Also note that '.' and '!' can be combined in a pattern

".!890d(????????)d96dd6d97dd6dec90fb745d60d????????8945f4d96df4df7df08b45f0505168????????d96dd6a3(????????)":
reference int g_viewportW;
reference int g_viewportH;

// There is also a special functionality if you want to use variable matching to grab the actual memory address of the match in the signature rather than the using the value of the data at the address as the variable.
// This is useful for the special cases where you have to directly match where a variable is defined (but honestly references to a pointer above are probably easier for that)
// Or specifically when you need the actual address of the instructions because you need to do some hacky fun stuff like writing CPU instructions directly in the middle of a function.
// Use with caution.
// You should be able to use uintptr_t, void*, or maybe even cast directly to a char** /char [] or uint8_t** /uint8_t [] array but those are untested :)
// Despite the fact it's using the instruction address, the 4-byte matching rule still applies like above since it uses the same matching code and this was a simple addition.
"!39d089d37d(????????)83c22383c10139df":
instruction uintptr_t Global__NOP__Ship_OnInit_0;

// Some x86_64 variables are actually using RIP relative addressing
// This means their actual address is their value + the next instruction's address (RIP + value) to get the real variable's address
// For these cases "offsetVariable" tag is added
// Please note that offsetVariable matches should be 4 or 8 bytes (but probably always 4 in AMD64, maybe different in other architectures)
// The match is only possible if the variable is the last bytes of the instruction, so if there is an instruction with two memory addresses, the match can only be done on the last memory address in the actual bytes of the instruction
// This is because the math is just address of match + length = "next instruction's assumed address" since we don't actually know the instruction pointer's real value at compile time.
// You will probably not run into this need in 32-bit but it's still also supported just in case
// The "instruction" tag above is not supported while using offsetVariable as offsetVariable implies you want the value and not the instruction's address
"!f30fc2cf01488bbbf8020000f30f101d(???????\?)f30f5edd":
offsetVariable GL_Color *Global_COLOR_GREEN;

// Also it can now replace code with NOP statements in a match
// The no-op mode **can** match matches smaller or larger than 4 bytes (8 hex digits) as it'll simply replace that area with NOP instructions.
// The match must end on a byte boundary (every group of 2 hex digits, ending in an odd numbered spot is invalid)
// So this one below replaces c6840d74fefeff01 with NOP's, the match can be anywhere in the signature.
// Rules like ! . still apply and ! is still highly recommended.
"!39d07d0b(c6840d74fefeff01)":
noop void* Global__Ship_OnInit;
// The void* can be anything, just has to be something there for the parser to match, name also doesn't really matter except for logging purposes as it does not create any variable.

// The Lua code has been tweaked to pass the following values through as a "Calling convention", doing so
// skips any assembly generation and will ignore any registers specified for arguments.
// When using these calling convention declaration styles it is *of extreme importance* that all types
// used for return values & argument values be exactly correct with their original declaration and that your
// compiler matches the original compiler. As no exceptions are currently made to correct to for example:
// MSVC "__thiscall" style when compiling with GCC under mingw it will use GCC's MinGW thiscall style not MSVC.
// Although the Lua & C++ code could theoretically be tweaked to permit a mismatch of compilers if you added even more calling conventions like a "__msvc_thiscall" or something and did the assembly code to rearrange it.
// As it is right now, these will be used for non-assembly code generation so that the compiler is directly aware of the calling convention and no assembly is needed.
// For x86_64 architecture, use __amd64 (since there is no special name for the calling convention, this will trigger skipping the register & assembly generation code) and the default amd64 calling convention for Windows or Linux will be used depending on target

// Windows only
__stdcall void someFunction();
__fastcall
__thiscall

// All x86 32-bit OSes
__cdecl
__regparm3
__regparm2
__regparm1

// Windows MSVC x86, Windows MSVC/Clang/ICC x86_64
__vectorcall

// All x86_64 OSes (just informs parser & C++ code to skip assembly style generation)
__amd64 // Will be considered a thiscall automatically if this is the first parameter

// There is also a noHook support (place before everything, even static or virtual) to define a signature and generic function name that will be used
// for signature hooking but which will not have a callable function defined in the output source or headers,
// technically it'll still be hookable right now but don't do it.
noHook void DO_NOT_HOOK();
*/

"5589e557565383e4f083ec408b4d088b750c85c9":
cleanup __cdecl float font_text_width(freetype::font_data& fontData, const char* str, float size);

"556905????????????????89e556536935????????????????83e4f801c6b8????????f725????????01f283c00183d200a3????????8915????????":
__cdecl int random32();

"55c705????????????????89e583e4f88b4508a3????????":
cleanup __cdecl void srandom32(unsigned int seed);

"83ec048b4424088b54240c83f80577??ff2485????????89f68dbc270000000085d2660fefc074??83fa010f84????????":
cleanup __cdecl float getSkillBonus(int skill, int level);

"8d4c240483e4f0ff71fc5589e55756535181ec????????8b018b79088985d4fcffff8b410489bdd0fcffff8985ccfcffff8b4018":
cleanup __cdecl void GenerateReward(ResourceEvent &ref, RewardDesc &reward, int worldLevel);

"8d4c240483e4f0ff71fc5589e55756535183ec288b59048b410c8b398b7108c70424????????89d98945e4e8????????83ec0485c00f84????????":
cleanup __cdecl void GetValue(ResourceEvent &ref, const std::string& type, int level, int worldLevel);
