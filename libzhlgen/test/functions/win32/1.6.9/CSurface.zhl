
"8b4424048b15????????89108b15????????8950048b15????????8950088b15????????89500cc3908db42600000000a1????????3b05????????74??83e810a3????????f3c390908db426000000008b15????????8b0d????????55":
static cleanup __cdecl GL_Color CSurface::GL_GetColor();
"8d4c240483e4f0ff71fc5589e55183ec14a1????????3b05????????74??85c074??8b1189108b51048950048b51088950088b510c89500c":
static cleanup __cdecl void CSurface::GL_SetColorTint(GL_Color color);



"5589e55653bb????????83e4f081ec????????8d44243cf30f110424f30f105d08894424088d442438f30f114c2424f30f1154242889442404f30f115c242ce8????????660fefe4":
static cleanup __cdecl void CSurface::GL_Rotate2(float angle, float x, float y, float z=1.f);
".5589e583e4f0e8????????85c0c9":
static cleanup __cdecl bool CSurface::IsFrameBufferSupported();
".5589e583e4f0e8????????e8????????":
static cleanup __cdecl void CSurface::StartFrame();
".5589e583e4f0e8????????":
static cleanup __cdecl void CSurface::FinishFrame();
".55660fefc089e583e4f083ec20f30f1144240cc744241400000000":
static cleanup __cdecl void CSurface::GL_ClearAll();
".55660fefc089e583e4f083ec10f30f1144240cf30f11442408":
static cleanup __cdecl void CSurface::GL_ClearColor();
".5589e583e4f083ec108b45148944240c8b4510894424088b450c89442404":
static cleanup __cdecl int CSurface::SetViewPort(int left, int bottom, int h, int w);
".5589e583e4f083ec10a1????????8b15????????89c129d1c1f90485c974??83e810":
static cleanup __cdecl void CSurface::GL_PopScissor();
".5589e5565383e4f083ec108b45088b5d0c8b751083f801a3????????891d????????8935????????0f84????????0f82????????":
static cleanup __cdecl void CSurface::GL_SetStencilMode(GL_StencilMode stencilMode, int ref, int mask);
".8b15????????8b0d????????89d029c8c1f80269c0????????85c075??c36690558d4440fd83ea0c89e556":
static cleanup __cdecl void CSurface::GL_PopStencilMode();
".5589e583e4f083ec20f30f10451cf30f11442414f30f104518f30f11442410f30f104514f30f1144240c":
static cleanup __cdecl int CSurface::GL_OrthoProjection(float mx1, float mx2, float mx3, float mx4, float mx5, float mx6);
".55b8????????89e583e4f083ec100f105010c70424????????0f1048200f104030":
static cleanup __cdecl int CSurface::GL_LoadIdentity();
".a1????????83f80f77??89c10f2805????????c1e106":
static cleanup __cdecl int CSurface::GL_PushMatrix();
".5589e583e4f083ec30a1????????85c0":
static cleanup __cdecl int CSurface::GL_PopMatrix();
".55660fefe489e5565383e4f081ec????????f30f1055080f2ed4f30f104d0cf30f104510f30f105d147a??":
static cleanup __cdecl void CSurface::GL_Rotate(float angle, float x, float y, float z=1.f);
".55b9????????89e583e4f083ec10f30f1005????????f30f10550c0f2ed0f30f104d10f30f105d080f9bc20f45d10f2ec80f9bc00f45c1":
static cleanup __cdecl void CSurface::GL_Scale(float x, float y, float z);
".55660fefc0b9????????89e583e4f083ec20f30f105d0c0f2ed8":
static cleanup __cdecl bool CSurface::GL_Translate(float x, float y, float z=0.f);
".5589e583e4f083ec208b4508f30f104508f30f11442410":
static cleanup __cdecl int CSurface::GL_SetColor(GL_Color color);
".a1????????3b05????????74??83e810a3????????":
static cleanup __cdecl void CSurface::GL_RemoveColorTint();
".8b15????????8b0d????????5539d189e58b450874??29ca83e2f08d5411f0":
static cleanup __cdecl GL_Color CSurface::GetColorTint();
".5589e583e4f083ec10c744240804000000":
static cleanup __cdecl bool CSurface::GL_EnableBlend();
".5589e583e4f083ec10c744240800000000":
static cleanup __cdecl bool CSurface::GL_DisableBlend();
".8b442404a2????????":
static cleanup __cdecl void CSurface::GL_ForceAntialias(bool on);
".5589e583e4f081ec????????a1????????8b15????????f30f107d1c":
static cleanup __cdecl bool CSurface::GL_DrawLine(float x1, float y1, float x2, float y2, float lineWidth, GL_Color color);
".5589e557565383e4f081ec????????":
static cleanup __cdecl bool CSurface::GL_DrawTriangle(Point vertex1, Point vertex2, Point vertex3, GL_Color color);
".5589e583e4f081ec????????a1????????8b15????????f30f106d08f30f10650c":
static cleanup __cdecl bool CSurface::GL_DrawRect(float x1, float y1, float x2, float y2, GL_Color color);
".5589e583e4f081ec????????8b55108b4514f30f106520f30f11642424":
static cleanup __cdecl bool CSurface::GL_DrawRectOutline(int x1, int y1, int x2, int y2, GL_Color color, float lineWidth);
".5589e5565383e4f081ec????????8b5520":
static cleanup __cdecl bool CSurface::GL_BlitImage(GL_Texture *tex, float x, float y, float x2, float y2, float rotation, GL_Color color, bool mirror);
".5589e557565383e4f081ec????????8b5520":
static cleanup __cdecl bool CSurface::GL_BlitPixelImage(GL_Texture *tex, float x, float y, float x2, float y2, float rotation, GL_Color color, bool mirror);
".5589e557565383e4f083ec60807d4000":
static cleanup __cdecl bool CSurface::GL_BlitImagePartial(GL_Texture *tex, float x, float y, float size_x, float size_y, float start_x, float end_x, float start_y, float end_y, float alpha, GL_Color color, bool mirror);
".5589e557565383e4f081ec????????":
static cleanup __cdecl bool CSurface::GL_BlitPixelImageWide(GL_Texture *tex, float x, float y, int x2, int y2, float opacity, GL_Color color, bool mirror);
".5589e55383e4f083ec208b5d0885db0f84????????a1????????8b15????????39d00f84????????29d0":
static cleanup __cdecl void CSurface::GL_RenderPrimitive(GL_Primitive *primitive);
".5589e55383e4f083ec208b5d0885db0f84????????a1????????8b15????????39d00f84????????":
static cleanup __cdecl void CSurface::GL_RenderPrimitiveWithAlpha(GL_Primitive *primitive, float alpha);
".5589e55383e4f083ec208b5d08f30f10450cf30f105d1085dbf30f106d14f30f1065180f84????????a1????????8b15????????39d00f84????????":
static cleanup __cdecl void CSurface::GL_RenderPrimitiveWithColor(GL_Primitive *primitive, GL_Color color);
".5589e55383e4f083ec108b5d0885db74??8b4324890424e8????????891c24e8????????":
static cleanup __cdecl void CSurface::GL_DestroyPrimitive(GL_Primitive *primitive);
".5589e55383e4f083ec50f30f10450cc70424????????f30f11442434f30f1144243cf30f584514f30f104d08f30f105510f30f58d1":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreateRectPrimitive(float x, float y, float w, float h, GL_Color color);
"55660fefdb660fefc089e553660fefd2660fefed83e4f081ecb0000000f30f2a5d08f30f2a450cf30f2a6d14f30f2a5510f30f104d28f30f115c2430f30f114424340f28e0":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreateRectOutlinePrimitive(int x, int y, int w, int h, GL_Color color, float lineWidth);
"8d4c240483e4f0ff71fc5589e55756535183ec388b39f30f105104f30f1059088b17":
static cleanup __cdecl void CSurface::AddTexVertices(std::vector<GL_TexVertex>* vec, float x1, float y1, float u1, float v1, float x2, float y2, float u2, float v2);
"8d4c240483e4f0ff71fc5589e55756535181ec880000008b41148b31f30f1071088b5104f30f10510c8b59100f28eaf30f1155880f28fe89459cf30f106128":
static cleanup __cdecl bool CSurface::GL_DrawShield(int x, int y, float a1, float b1, int angle1, int angle2, GL_Color color, float thickness);
".8d????0483e4f0ff????":
static cleanup __cdecl bool CSurface::GL_DrawLaser(int x, int y, int w, int h, GL_Color color);
"8d4c240483e4f0ff71fc5589e55756535183ec788b018b5104f30f105908":
static cleanup __cdecl bool CSurface::GL_DrawCircle(int x, int y, float radius, GL_Color color);

"8d4c240483e4f0ff71fc5589e55756535183ec588b71048b198b4604":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreateMultiImagePrimitive(GL_Texture* tex, std::vector<GL_TexVertex>* vec, GL_Color color);
".a1????????3b05????????74??85c074??8b15????????89108b15????????8950048b15????????89500883c00ca3????????c38d4c240483e4f0":
static cleanup __cdecl void CSurface::GL_PushStencilMode();

"8d4c240483e4f0ff71fc5589e556535183ec5c8b31f30f105118f30f1035????????0f2ed6f30f10690cf30f106110f30f116dc0f30f1165c4":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreateImagePrimitive(GL_Texture *tex, float x, float y, float size_x, float size_y, float rotate, GL_Color color);
"8d4c240483e4f0ff71fc5589e556535183ec5c8b318b4128f30f106118f30f1015????????0f2ee2":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreatePixelImagePrimitive(GL_Texture *tex, float x, float y, float size_x, float size_y, float rotate, GL_Color color, bool unk);

"5589e557565383e4f083ec508b45108b15????????8b5d088b7d0c89442430a1????????39d00f84????????29d083e0f08d4402f0f30f1018f30f106804f30f106008f30f10500c8b47042b07":
static cleanup __cdecl void CSurface::GL_BlitMultiColorImage(GL_Texture *tex, const std::vector<GL_ColorTexVertex>& texVertices, bool antialias);
"5589e557565383e4f083ec508b45108b15????????8b5d088b750c89442420a1????????39d00f84????????29d083e0f08d4402f0f30f1020f30f106804f30f107008f30f10780cf30f1164242c":
static cleanup __cdecl void CSurface::GL_BlitMultiImage(GL_Texture *tex, const std::vector<GL_TexVertex>& texVertices, bool antialias);


/* Could cause OpenGL issues
"5531c089e5565383e4f083ec208b75088b5d0c8b551083fe0177??85d274??85db74??803b0074??":
static cleanup __cdecl int CSurface::shader_create_from_source(ShaderType type, const char* source, int length);
".5589e557565383e4f083ec208b5d088b7d0c85db7e??a1????????39c38944241c7d??0fb605????????8b15????????84c08844241b75??89d18b0c9985c974??85ff7e??":
static cleanup __cdecl int CSurface::shader_pipeline_create(int vertex_shader, int fragment_shader);
".5589e557565383e4f083ec108b5d0885db7e??3b1d????????":
static cleanup __cdecl void CSurface::shader_pipeline_destroy(int pipeline);
".5589e5565383e4f083ec108b4d0883f90074??7e??3b0d????????7d??803d??????????":
static cleanup __cdecl void CSurface::shader_pipeline_apply(int pipeline);
"55b8????????89e557565383e4f0e8????????29c48b752085f674??8b5d1c85db0f84????????8d5c2420be????????31ff89d88b4d1085c97e??":
static cleanup __cdecl char* CSurface::generate_fragment_shader_source(GraphicsPrimitiveType primitive_type, int position_count, int texcoord_count, GraphicsTextureColorType texcolor_type, int tex_offset, int color_count, int color_uniform, int fog, int alpha_test, GraphicsComparisonType alpha_comparison);
"8d4c240483e4f0ff71fc5589e55756535181ec????????8b79088b018b5104897dcc8b790c897dc88b7910897dc48b7914897dc08b7918":
static cleanup __cdecl int CSurface::opengl_select_shader(const void *primitive, const void *texture, int tex_offset, int color_uniform, int fog, int alpha_test, GraphicsComparisonType alpha_comparison);
*/

"5589e557565383e4f083ec508b7d08f30f10651c8b77042b3789f2c1fa040f2e25????????0f8a????????0f85????????8d0c95????????89d08954244c":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreateMultiLinePrimitive(std::vector<GL_Line>& vec, GL_Color color, float thickness);

/*
"8d4c240483e4f0ff71fc5589e55756535183ec78807938008b19f30f107910f30f117dc4f30f107924f30f106104f30f104108":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreateImagePartialPrimitive(GL_Texture *tex, float x, float y, float size_x, float size_y, float start_x, float end_x, float start_y, float end_y, float alpha, GL_Color color, bool mirror); 
*/
"5589e557565383e4f083ec408b75088b46042b06c1f8048d14c5????????89c78944243cc1e00581fa????????ba????????0f47c2":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreateMultiRectPrimitive(std::vector<Globals::Rect>& vec, GL_Color color);
"5589e557565383e4f081ec90020000f30f105514f30f105d180f2eda":
static cleanup __cdecl GL_Primitive* CSurface::GL_CreatePiePartialPrimitive(int x, int y, float radius, float deg1, float deg2, float thickness, GL_Color color);


struct CSurface
{{
	/*
	static void GL_ApplyShader(int pipeline)
	{
		shader_pipeline_apply(pipeline);
	}
	
	static void GL_DestroyShader(int pipeline)
	{
		shader_pipeline_destroy(pipeline);
	}
	
	static int GL_CreateShaderPipeline(int vertex_shader, int fragment_shader)
	{
		return shader_pipeline_create(vertex_shader, fragment_shader);
	}
	
	static int GL_CreateShader(ShaderType type, const char* source)
	{
		return shader_create_from_source(type, source, -1);
	}
	*/
	
}};
