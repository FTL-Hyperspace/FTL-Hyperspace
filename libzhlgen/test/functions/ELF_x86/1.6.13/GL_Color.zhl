

struct GL_Color
{{
	GL_Color(float rr, float gg, float bb, float aa) : r(rr), g(gg), b(bb), a(aa)
	{
		
	}

    static GL_Color Lerp(const GL_Color &color1, const GL_Color &color2, float amount)
    {
		float red = color1.r * (1.f - amount) + color2.r * amount;
		float green = color1.g * (1.f - amount) + color2.g * amount;
		float blue = color1.b * (1.f - amount) + color2.b * amount;
		float alpha = 1.f;
        return GL_Color(red, green, blue, alpha);
    }

    static GL_Color LerpAlpha(const GL_Color &color1, const GL_Color &color2, float amount)
    {
		float red = color1.r * (1.f - amount) + color2.r * amount;
		float green = color1.g * (1.f - amount) + color2.g * amount;
		float blue = color1.b * (1.f - amount) + color2.b * amount;
		float alpha = color1.a * (1.f - amount) + color2.a * amount;
        return GL_Color(red, green, blue, alpha);
    }
	
	static GL_Color FromHSV(float fH, float fS, float fV, float fA)
	{
		float fR, fB, fG;
		float fC = fV * fS; // Chroma
		float fHPrime = fmod(fH / 60.0, 6);
		float fX = fC * (1 - fabs(fmod(fHPrime, 2) - 1));
		float fM = fV - fC;
		
		if (0 <= fHPrime && fHPrime < 1) 
		{
			fR = fC;
			fG = fX;
			fB = 0;
		} 
		else if(1 <= fHPrime && fHPrime < 2) 
		{
			fR = fX;
			fG = fC;
			fB = 0;
		} 
		else if(2 <= fHPrime && fHPrime < 3) 
		{
			fR = 0;
			fG = fC;
			fB = fX;
		} 
		else if(3 <= fHPrime && fHPrime < 4) 
		{
			fR = 0;
			fG = fX;
			fB = fC;
		} 
		else if(4 <= fHPrime && fHPrime < 5) 
		{
			fR = fX;
			fG = 0;
			fB = fC;
		} 
		else if(5 <= fHPrime && fHPrime < 6) 
		{
			fR = fC;
			fG = 0;
			fB = fX;
		} 
		else 
		{
			fR = 0;
			fG = 0;
			fB = 0;
		}
		  
		fR += fM;
		fG += fM;
		fB += fM;
		
		return GL_Color(fR, fB, fG, fA);
	}
	
	GL_Color() {}

	bool operator==(const GL_Color &color2)
	{
		return r == color2.r && g == color2.g && b == color2.b && a == color2.a;
	}

	bool operator!=(const GL_Color &color2)
	{
		return !(r == color2.r && g == color2.g && b == color2.b && a == color2.a);
	}
}};
